
segunda_unidade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000798  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000920  08000920  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000920  08000920  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000920  08000920  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000920  08000920  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000920  08000920  00001920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000924  08000924  00001924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000928  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000025c9  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000688  00000000  00000000  000045fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a8  00000000  00000000  00004c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ed  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6c9  00000000  00000000  0000511d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ddf  00000000  00000000  000237e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf96b  00000000  00000000  000265c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e5f30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000954  00000000  00000000  000e5f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  000e68c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000908 	.word	0x08000908

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000908 	.word	0x08000908

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	@ (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <Utility_Init>:
//Declarações de funções úteis

//Funções de configuração do sistema de clock do STM32
//Inicialização de funções da biblioteca
void Utility_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	Configure_Clock();	//inicializa o sistema de clock
 8000250:	f000 f804 	bl	800025c <Configure_Clock>
	TIM2_Setup();		//configura o Timer2 como base de tempo de 1us
 8000254:	f000 f86c 	bl	8000330 <TIM2_Setup>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}

0800025c <Configure_Clock>:
//HCLK = 168 MHz
//APB1 = 42 MHz
//APB2 = 84 MHz
//USB, RNG, SDIO = 48 MHz
void Configure_Clock(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	#define PLL_N	168
	#define PLL_P	2
	#define PLL_Q	7

	//Configurações da Flash e do regulador de tensão para permitir operação em alta velocidade
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;	//habilita prefetch, caches e a latência da flash
 8000260:	4b2e      	ldr	r3, [pc, #184]	@ (800031c <Configure_Clock+0xc0>)
 8000262:	f240 7205 	movw	r2, #1797	@ 0x705
 8000266:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;	//habilita o clock da interface de energia
 8000268:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <Configure_Clock+0xc4>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026c:	4a2c      	ldr	r2, [pc, #176]	@ (8000320 <Configure_Clock+0xc4>)
 800026e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000272:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;				//regulador de tensão no modo 2
 8000274:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <Configure_Clock+0xc8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2a      	ldr	r2, [pc, #168]	@ (8000324 <Configure_Clock+0xc8>)
 800027a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800027e:	6013      	str	r3, [r2, #0]

	//Configuração do modo de agrupamento de prioridades das interrupções
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f7ff ffa1 	bl	80001c8 <__NVIC_SetPriorityGrouping>

	//Reseta os registradores do módulo RCC para o estado inicial
	RCC->CIR = 0;				//desabilita todas as interrupções de RCC
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <Configure_Clock+0xc4>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_HSION;	//liga o oscilador HSI
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <Configure_Clock+0xc4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a23      	ldr	r2, [pc, #140]	@ (8000320 <Configure_Clock+0xc4>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
	RCC->CFGR = 0;				//reseta o registrador CFGR
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <Configure_Clock+0xc4>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	//Desliga HSE, CSS e o PLL e o bypass de HSE
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON | RCC_CR_HSEBYP);
 800029e:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <Configure_Clock+0xc4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000320 <Configure_Clock+0xc4>)
 80002a4:	f023 7386 	bic.w	r3, r3, #17563648	@ 0x10c0000
 80002a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80002ac:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x24003010;	//reseta o registrador PLLCFGR
 80002ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <Configure_Clock+0xc4>)
 80002b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000328 <Configure_Clock+0xcc>)
 80002b2:	605a      	str	r2, [r3, #4]

	//Configura a fonte de clock (HSE), os parâmetros do PLL e prescalers dos barramentos AHB, APB
	RCC->CR |= RCC_CR_HSEON;				//habilita HSE
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <Configure_Clock+0xc4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a19      	ldr	r2, [pc, #100]	@ (8000320 <Configure_Clock+0xc4>)
 80002ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002be:	6013      	str	r3, [r2, #0]
	while(!((RCC->CR) & RCC_CR_HSERDY));	//espera HSE ficar pronto
 80002c0:	bf00      	nop
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <Configure_Clock+0xc4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <Configure_Clock+0x66>
    RCC->CFGR |= 0x9400;	//HCLK = SYSCLK/1, PCLK2 = HCLK/2, PCLK1 = HCLK/4
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <Configure_Clock+0xc4>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <Configure_Clock+0xc4>)
 80002d4:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 80002d8:	6093      	str	r3, [r2, #8]

    //Configura a fonte de clock e os parâmetros do PLL principal
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (0x400000) | (PLL_Q << 24);
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <Configure_Clock+0xc4>)
 80002dc:	4a13      	ldr	r2, [pc, #76]	@ (800032c <Configure_Clock+0xd0>)
 80002de:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON;			//habilita o PLL
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <Configure_Clock+0xc4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <Configure_Clock+0xc4>)
 80002e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002ea:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));	//espera o PLL ficar pronto verificando a flag PLLRDY
 80002ec:	bf00      	nop
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <Configure_Clock+0xc4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <Configure_Clock+0x92>

    RCC->CFGR |= 0x2;					//seleciona o PLL como fonte de SYSCLK
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <Configure_Clock+0xc4>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <Configure_Clock+0xc4>)
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & 0xC) != 0x8);	//espera o PLL ser a fonte de SYSCLK
 8000306:	bf00      	nop
 8000308:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <Configure_Clock+0xc4>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	f003 030c 	and.w	r3, r3, #12
 8000310:	2b08      	cmp	r3, #8
 8000312:	d1f9      	bne.n	8000308 <Configure_Clock+0xac>
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40023c00 	.word	0x40023c00
 8000320:	40023800 	.word	0x40023800
 8000324:	40007000 	.word	0x40007000
 8000328:	24003010 	.word	0x24003010
 800032c:	07402a04 	.word	0x07402a04

08000330 <TIM2_Setup>:


//Funções de timers e temporização
//Configura o timer 2 como base de tempo de 1us
void TIM2_Setup(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	//O modo padrão do contador é com contagem crescente
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	//liga o clock do Timer2
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <TIM2_Setup+0x3c>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000338:	4a0c      	ldr	r2, [pc, #48]	@ (800036c <TIM2_Setup+0x3c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 83;						//prescaler para incrementos a cada 1uS
 8000340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000344:	2253      	movs	r2, #83	@ 0x53
 8000346:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->EGR = TIM_EGR_UG;				//update event para escrever o valor do prescaler
 8000348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034c:	2201      	movs	r2, #1
 800034e:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;			//habilita o timer
 8000350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40023800 	.word	0x40023800

08000370 <Delay_ms>:
	while(TIM2->CNT < delay);	//aguarda o tempo passar
}

//Criação de atraso em ms
void Delay_ms(uint32_t delay)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t max = 1000*delay;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800037e:	fb02 f303 	mul.w	r3, r2, r3
 8000382:	60fb      	str	r3, [r7, #12]
	TIM2->CNT = 0;				//inicializa o contador com 0
 8000384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < max);		//aguarda o tempo passar
 800038c:	bf00      	nop
 800038e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	429a      	cmp	r2, r3
 8000398:	d8f9      	bhi.n	800038e <Delay_ms+0x1e>
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <GPIO_Clock_Enable>:


//Funções de manipulação de GPIO
//Habilita o clock de um GPIO
void GPIO_Clock_Enable(GPIO_TypeDef* GPIOx)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1 << ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)));
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <GPIO_Clock_Enable+0x30>)
 80003b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80003ba:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80003be:	0a9b      	lsrs	r3, r3, #10
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	4904      	ldr	r1, [pc, #16]	@ (80003d8 <GPIO_Clock_Enable+0x30>)
 80003c8:	4313      	orrs	r3, r2
 80003ca:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40023800 	.word	0x40023800

080003dc <GPIO_Pin_Mode>:

//Configura o modo de operação de um pino de um GPIO
void GPIO_Pin_Mode(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
 80003e8:	4613      	mov	r3, r2
 80003ea:	70bb      	strb	r3, [r7, #2]
	GPIOx->MODER &= ~(0b11 << 2*pin);	//reseta os 2 bits do modo de operação
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	78fa      	ldrb	r2, [r7, #3]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	2103      	movs	r1, #3
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	401a      	ands	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << 2*pin);	//configura o modo selecionado
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	78b9      	ldrb	r1, [r7, #2]
 8000408:	78fa      	ldrb	r2, [r7, #3]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <GPIO_Alternate_Function>:
	GPIOx->OTYPER |= (mode << pin);	//configura o tipo selecionado
}

//Configura a função alternativa de um pino de um GPIO
void GPIO_Alternate_Function(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t function)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	460b      	mov	r3, r1
 800042c:	70fb      	strb	r3, [r7, #3]
 800042e:	4613      	mov	r3, r2
 8000430:	70bb      	strb	r3, [r7, #2]
	GPIOx->AFR[pin/8] &= ~(0b1111 << ((pin % 8) * 4));	//reseta os 4 bits da função alternativa
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2d8      	uxtb	r0, r3
 8000438:	4602      	mov	r2, r0
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3208      	adds	r2, #8
 800043e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000442:	78fa      	ldrb	r2, [r7, #3]
 8000444:	f002 0207 	and.w	r2, r2, #7
 8000448:	0092      	lsls	r2, r2, #2
 800044a:	210f      	movs	r1, #15
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4602      	mov	r2, r0
 8000456:	4019      	ands	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3208      	adds	r2, #8
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIOx->AFR[pin/8] |= (function << ((pin % 8) * 4));	//configura a função selecionada
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b2d8      	uxtb	r0, r3
 8000466:	4602      	mov	r2, r0
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3208      	adds	r2, #8
 800046c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000470:	78b9      	ldrb	r1, [r7, #2]
 8000472:	78fa      	ldrb	r2, [r7, #3]
 8000474:	f002 0207 	and.w	r2, r2, #7
 8000478:	0092      	lsls	r2, r2, #2
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4602      	mov	r2, r0
 8000482:	4319      	orrs	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3208      	adds	r2, #8
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <ADC_Init>:
//Configura o clock do ADC selecionado e habilita o ADC.
//@param  ADCx: onde x pode ser 1, 2 ou 3 para selecionar o ADC desejado.
//@param  mode: modo de operação do ADC (SINGLE_CHANNEL ou MULTI_CHANNEL).
//@param  resolution: resolução da conversão do ADC (ADC_RES_12BITS, ADC_RES_10BITS, ADC_RES_8BITS ou ADC_RES_6BITS).
void ADC_Init(ADC_TypeDef *ADCx, uint8_t mode, uint8_t resolution)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	70fb      	strb	r3, [r7, #3]
 80004a4:	4613      	mov	r3, r2
 80004a6:	70bb      	strb	r3, [r7, #2]
	//Configuração do Clock do ADCx
	//Habilitação do Clock
	RCC->APB2ENR |= (1 << ((uint32_t)ADCx - (ADC1_BASE)) / ((ADC2_BASE) - (ADC1_BASE))) << 8;
 80004a8:	4b28      	ldr	r3, [pc, #160]	@ (800054c <ADC_Init+0xb4>)
 80004aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80004b2:	f5a3 3390 	sub.w	r3, r3, #73728	@ 0x12000
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	2101      	movs	r1, #1
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4922      	ldr	r1, [pc, #136]	@ (800054c <ADC_Init+0xb4>)
 80004c2:	4313      	orrs	r3, r2
 80004c4:	644b      	str	r3, [r1, #68]	@ 0x44

	//Configuração do prescaler do ADC
	ADC->CCR |= (0b01 << 16);	//prescaler /4 (84MHz/4 = 21MHz)
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <ADC_Init+0xb8>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	4a21      	ldr	r2, [pc, #132]	@ (8000550 <ADC_Init+0xb8>)
 80004cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004d0:	6053      	str	r3, [r2, #4]

	//Configura modo de operação
	if(!mode)	//SINGLE_CHANNEL
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10c      	bne.n	80004f2 <ADC_Init+0x5a>
	{
		ADCx->CR1 &= ~ADC_CR1_SCAN;	//desabilita o escaneamento de canais
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	605a      	str	r2, [r3, #4]
		ADC1->CR2 &= ~ADC_CR2_EOCS;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <ADC_Init+0xbc>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000554 <ADC_Init+0xbc>)
 80004ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004ee:	6093      	str	r3, [r2, #8]
 80004f0:	e00b      	b.n	800050a <ADC_Init+0x72>
	}
	else		//MULTI_CHANNEL
	{
		ADCx->CR1 |= ADC_CR1_SCAN;	//habilita o escaneamento de canais
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	605a      	str	r2, [r3, #4]
		ADC1->CR2 |= ADC_CR2_EOCS;	//bit EOC setado ao final de cada conversão
 80004fe:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <ADC_Init+0xbc>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <ADC_Init+0xbc>)
 8000504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000508:	6093      	str	r3, [r2, #8]
	}

	//Definição da resolução
	ADCx->CR1 &= ~ADC_CR1_RES;		//limpa o campo da resolução
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	605a      	str	r2, [r3, #4]
	ADCx->CR1 |= resolution << 24;	//escreve a resolução
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	78bb      	ldrb	r3, [r7, #2]
 800051c:	061b      	lsls	r3, r3, #24
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]

	ADCx->SMPR2 |= 0b111;			//seleção do tempo de amostragem (máximo)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	f043 0207 	orr.w	r2, r3, #7
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	611a      	str	r2, [r3, #16]

	//Liga o ADCx
	ADCx->CR2 |= ADC_CR2_ADON;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f043 0201 	orr.w	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
	Delay_ms(1);	//aguarda o ADC iniciar
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff17 	bl	8000370 <Delay_ms>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40012300 	.word	0x40012300
 8000554:	40012000 	.word	0x40012000

08000558 <ADC_SingleChannel>:
//Esta função configura o pino de entrada do canal selecionado como analógico
//e configura o sequenciador do ADC para realizar a conversão nesse canal.
//@param  ADCx: onde x pode ser 1, 2 ou 3 para selecionar o periférico ADC.
//@param  canal: número do canal a ser convertido (ADC_IN0 a ADC_IN15).
void ADC_SingleChannel(ADC_TypeDef *ADCx, uint8_t channel)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
	//Configuração do canal a ser convertido pelo ADCx
	if(channel < 8)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d809      	bhi.n	800057e <ADC_SingleChannel+0x26>
	{
		GPIO_Clock_Enable(GPIOA);				//habilita o clock do GPIOA
 800056a:	4821      	ldr	r0, [pc, #132]	@ (80005f0 <ADC_SingleChannel+0x98>)
 800056c:	f7ff ff1c 	bl	80003a8 <GPIO_Clock_Enable>
		GPIO_Pin_Mode(GPIOA, channel, ANALOG);	//configura o pino PAx como função analógica
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2203      	movs	r2, #3
 8000574:	4619      	mov	r1, r3
 8000576:	481e      	ldr	r0, [pc, #120]	@ (80005f0 <ADC_SingleChannel+0x98>)
 8000578:	f7ff ff30 	bl	80003dc <GPIO_Pin_Mode>
 800057c:	e022      	b.n	80005c4 <ADC_SingleChannel+0x6c>
	}
	else if(channel == 8 || channel == 9)
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	2b08      	cmp	r3, #8
 8000582:	d002      	beq.n	800058a <ADC_SingleChannel+0x32>
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b09      	cmp	r3, #9
 8000588:	d10b      	bne.n	80005a2 <ADC_SingleChannel+0x4a>
	{
		GPIO_Clock_Enable(GPIOB);					//habilita o clock do GPIOB
 800058a:	481a      	ldr	r0, [pc, #104]	@ (80005f4 <ADC_SingleChannel+0x9c>)
 800058c:	f7ff ff0c 	bl	80003a8 <GPIO_Clock_Enable>
		GPIO_Pin_Mode(GPIOB, channel - 8, ANALOG);	//configura o pino PB(x-8) como função analógica
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	3b08      	subs	r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2203      	movs	r2, #3
 8000598:	4619      	mov	r1, r3
 800059a:	4816      	ldr	r0, [pc, #88]	@ (80005f4 <ADC_SingleChannel+0x9c>)
 800059c:	f7ff ff1e 	bl	80003dc <GPIO_Pin_Mode>
 80005a0:	e010      	b.n	80005c4 <ADC_SingleChannel+0x6c>
	}
	else if(channel >= 10 && channel <= 15)
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	2b09      	cmp	r3, #9
 80005a6:	d90d      	bls.n	80005c4 <ADC_SingleChannel+0x6c>
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	2b0f      	cmp	r3, #15
 80005ac:	d80a      	bhi.n	80005c4 <ADC_SingleChannel+0x6c>
	{
		GPIO_Clock_Enable(GPIOC);					//habilita o clock do GPIOC
 80005ae:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <ADC_SingleChannel+0xa0>)
 80005b0:	f7ff fefa 	bl	80003a8 <GPIO_Clock_Enable>
		GPIO_Pin_Mode(GPIOC, channel - 10, ANALOG);	//configura o pino PC(x-10) como função analógica
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	3b0a      	subs	r3, #10
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2203      	movs	r2, #3
 80005bc:	4619      	mov	r1, r3
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <ADC_SingleChannel+0xa0>)
 80005c0:	f7ff ff0c 	bl	80003dc <GPIO_Pin_Mode>
	}

	//Seleciona o canal a ser convertido pelo ADCx
	ADCx->SQR1 &= ~0xF << 20;	//seleciona a quantidade de canais (1 canal)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005c8:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	ADCx->SQR3 &= ~0x1F;		//limpa o campo do canal
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d4:	f023 021f 	bic.w	r2, r3, #31
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	635a      	str	r2, [r3, #52]	@ 0x34
	ADCx->SQR3 |= channel;		//escreve o canal
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	431a      	orrs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400
 80005f8:	40020800 	.word	0x40020800

080005fc <USART1_Init>:


//Funções de periféricos de comunicação
//Configuração básica da USART1
void USART1_Init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	//Configuração da USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;				//habilita o clock da USART1
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <USART1_Init+0x54>)
 8000602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000604:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <USART1_Init+0x54>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6453      	str	r3, [r2, #68]	@ 0x44
	USART1->BRR = 84;									//ajusta baud rate para 1 Mbps (frequência do periférico de 84MHz)
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <USART1_Init+0x58>)
 800060e:	2254      	movs	r2, #84	@ 0x54
 8000610:	609a      	str	r2, [r3, #8]
	//O estado default do registrador USART1->CR1 garante:
	//1 stop bit, 8 bits de dados, sem bit de paridade,
	//oversampling de 16 amostras por bit
	USART1->CR1 |= (USART_CR1_TE | USART_CR1_UE);		//habilita apenas o transmissor e a USART1
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <USART1_Init+0x58>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <USART1_Init+0x58>)
 8000618:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	60d3      	str	r3, [r2, #12]
	//Habilita a interrupção da USART1 no NVIC
	//NVIC_SetPriority(USART1_IRQn, 0);	//seta a prioridade da USART1
	//NVIC_EnableIRQ(USART1_IRQn);		//habilita a interrupção da USART1

	//Configuração dos pinos PA9 (TX) e PA10(RX)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			//habilita o clock do GPIOA
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <USART1_Init+0x54>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <USART1_Init+0x54>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (0b10 << 20) | (0b10 << 18);	//pinos PA10 e PA9 em função alternativa
 800062e:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <USART1_Init+0x5c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a09      	ldr	r2, [pc, #36]	@ (8000658 <USART1_Init+0x5c>)
 8000634:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000638:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (0b0111 << 8) | (0b0111 << 4);	//função alternativa 7 (USART1)
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <USART1_Init+0x5c>)
 800063c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063e:	4a06      	ldr	r2, [pc, #24]	@ (8000658 <USART1_Init+0x5c>)
 8000640:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000644:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40023800 	.word	0x40023800
 8000654:	40011000 	.word	0x40011000
 8000658:	40020000 	.word	0x40020000

0800065c <__io_putchar>:

//Redefinição da função de envio de dados pela USART1
int __io_putchar(int ch)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	USART1->DR = ch;						//transmite o dado
 8000664:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <__io_putchar+0x2c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE));	//espera pelo fim da transmissão
 800066a:	bf00      	nop
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <__io_putchar+0x2c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f9      	beq.n	800066c <__io_putchar+0x10>
	return ch;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40011000 	.word	0x40011000

0800068c <__io_getchar>:

//Redefinição da função de recebimento de dados pela USART1
int __io_getchar(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
   return (uint16_t)(USART1->DR);	//lê o dado recebido
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <__io_getchar+0x14>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	b29b      	uxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40011000 	.word	0x40011000

080006a4 <USART1_IRQHandler>:

//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32f407vetx.s
void USART1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());	//lê o dado e reenvia pela USART1
 80006a8:	f7ff fff0 	bl	800068c <__io_getchar>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffd4 	bl	800065c <__io_putchar>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <main>:
#include "main.h"
#include "Utility.h"
#include <stdio.h>


int main(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

	Utility_Init();
 80006be:	f7ff fdc5 	bl	800024c <Utility_Init>
	USART1_Init();
 80006c2:	f7ff ff9b 	bl	80005fc <USART1_Init>


	GPIO_Clock_Enable(GPIOA);
 80006c6:	4839      	ldr	r0, [pc, #228]	@ (80007ac <main+0xf4>)
 80006c8:	f7ff fe6e 	bl	80003a8 <GPIO_Clock_Enable>
	GPIO_Pin_Mode(GPIOA, PIN_2, ALTERNATE);
 80006cc:	2202      	movs	r2, #2
 80006ce:	2102      	movs	r1, #2
 80006d0:	4836      	ldr	r0, [pc, #216]	@ (80007ac <main+0xf4>)
 80006d2:	f7ff fe83 	bl	80003dc <GPIO_Pin_Mode>
	GPIO_Alternate_Function(GPIOA, PIN_2, AF2);
 80006d6:	2202      	movs	r2, #2
 80006d8:	2102      	movs	r1, #2
 80006da:	4834      	ldr	r0, [pc, #208]	@ (80007ac <main+0xf4>)
 80006dc:	f7ff fea1 	bl	8000422 <GPIO_Alternate_Function>


	// Configuração para fazer um Timer3 enviar um sinal
	// A cada 200ms e esse sinal disparar uma conversão ADC1
	// Habilita o clock do Timer5
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80006e0:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <main+0xf8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a32      	ldr	r2, [pc, #200]	@ (80007b0 <main+0xf8>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
	// Define como crescente
	TIM5->CR1 &= ~TIM_CR1_DIR;
 80006ec:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <main+0xfc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <main+0xfc>)
 80006f2:	f023 0310 	bic.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
	// Auto reload = 39999
	TIM5->ARR = 39999;
 80006f8:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <main+0xfc>)
 80006fa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Prescaler para termos pulsos a cada 5us
	TIM5->PSC = 419;
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <main+0xfc>)
 8000702:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
	// Colocando o timer em modo mestre
	TIM5->CR2 = 0b010 << 4;
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <main+0xfc>)
 800070a:	2220      	movs	r2, #32
 800070c:	605a      	str	r2, [r3, #4]
	// Colocando para o overflow gerar um gatilho
	TIM5->CR1 |= TIM_CR1_URS;
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <main+0xfc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <main+0xfc>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6013      	str	r3, [r2, #0]
	// Update event para escrever o valor do prescaler
	TIM5->EGR |= TIM_EGR_UG;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <main+0xfc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <main+0xfc>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6153      	str	r3, [r2, #20]



	ADC_Init(ADC1, SINGLE_CHANNEL, ADC_RES_12BITS);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	4823      	ldr	r0, [pc, #140]	@ (80007b8 <main+0x100>)
 800072c:	f7ff feb4 	bl	8000498 <ADC_Init>
	ADC_SingleChannel(ADC1, ADC_IN0);
 8000730:	2100      	movs	r1, #0
 8000732:	4821      	ldr	r0, [pc, #132]	@ (80007b8 <main+0x100>)
 8000734:	f7ff ff10 	bl	8000558 <ADC_SingleChannel>

	// Seleciona TIM3_TRGO como fonte de gatiho do ADC1
	ADC1->CR2 |= 0b1000 << 24;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <main+0x100>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <main+0x100>)
 800073e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000742:	6093      	str	r3, [r2, #8]
	// Habilita disparo externo em rising edge no ADC1
	ADC1->CR2 |= 0b01 << 28;
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <main+0x100>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <main+0x100>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6093      	str	r3, [r2, #8]
	// Habilita interrupção de EOC
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <main+0x100>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <main+0x100>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6053      	str	r3, [r2, #4]
	// Habilita a interrupção do ADC no NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 800075c:	2012      	movs	r0, #18
 800075e:	f7ff fd57 	bl	8000210 <__NVIC_EnableIRQ>
	// Habilita o timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <main+0x104>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <main+0x104>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6013      	str	r3, [r2, #0]


	while(1){

		for (int duty = 0; duty < 100; ++duty){
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	e008      	b.n	8000786 <main+0xce>
			TIM5->CCR3 = duty;  // atualiza o duty cycle
 8000774:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <main+0xfc>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	63d3      	str	r3, [r2, #60]	@ 0x3c
			Delay_ms(20);
 800077a:	2014      	movs	r0, #20
 800077c:	f7ff fdf8 	bl	8000370 <Delay_ms>
		for (int duty = 0; duty < 100; ++duty){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b63      	cmp	r3, #99	@ 0x63
 800078a:	ddf3      	ble.n	8000774 <main+0xbc>
		}

		for (int duty = 99; duty >= 0; --duty){
 800078c:	2363      	movs	r3, #99	@ 0x63
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	e008      	b.n	80007a4 <main+0xec>
			TIM5->CCR3 = duty;  // atualiza o duty cycle
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <main+0xfc>)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	63d3      	str	r3, [r2, #60]	@ 0x3c
			Delay_ms(20);
 8000798:	2014      	movs	r0, #20
 800079a:	f7ff fde9 	bl	8000370 <Delay_ms>
		for (int duty = 99; duty >= 0; --duty){
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	daf3      	bge.n	8000792 <main+0xda>
		for (int duty = 0; duty < 100; ++duty){
 80007aa:	e7e0      	b.n	800076e <main+0xb6>
 80007ac:	40020000 	.word	0x40020000
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40000c00 	.word	0x40000c00
 80007b8:	40012000 	.word	0x40012000
 80007bc:	40000400 	.word	0x40000400

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f83f 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800087c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000848:	f7ff ffea 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	@ (8000884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	@ (8000890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f000 f825 	bl	80008c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000876:	f7ff ff1f 	bl	80006b8 <main>
  bx  lr    
 800087a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800087c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000888:	08000928 	.word	0x08000928
  ldr r2, =_sbss
 800088c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000890:	20000024 	.word	0x20000024

08000894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC_IRQHandler>
	...

08000898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000020 	.word	0x20000020

080008c0 <__libc_init_array>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	4d0d      	ldr	r5, [pc, #52]	@ (80008f8 <__libc_init_array+0x38>)
 80008c4:	4c0d      	ldr	r4, [pc, #52]	@ (80008fc <__libc_init_array+0x3c>)
 80008c6:	1b64      	subs	r4, r4, r5
 80008c8:	10a4      	asrs	r4, r4, #2
 80008ca:	2600      	movs	r6, #0
 80008cc:	42a6      	cmp	r6, r4
 80008ce:	d109      	bne.n	80008e4 <__libc_init_array+0x24>
 80008d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000900 <__libc_init_array+0x40>)
 80008d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000904 <__libc_init_array+0x44>)
 80008d4:	f000 f818 	bl	8000908 <_init>
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	10a4      	asrs	r4, r4, #2
 80008dc:	2600      	movs	r6, #0
 80008de:	42a6      	cmp	r6, r4
 80008e0:	d105      	bne.n	80008ee <__libc_init_array+0x2e>
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e8:	4798      	blx	r3
 80008ea:	3601      	adds	r6, #1
 80008ec:	e7ee      	b.n	80008cc <__libc_init_array+0xc>
 80008ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f2:	4798      	blx	r3
 80008f4:	3601      	adds	r6, #1
 80008f6:	e7f2      	b.n	80008de <__libc_init_array+0x1e>
 80008f8:	08000920 	.word	0x08000920
 80008fc:	08000920 	.word	0x08000920
 8000900:	08000920 	.word	0x08000920
 8000904:	08000924 	.word	0x08000924

08000908 <_init>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	bf00      	nop
 800090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090e:	bc08      	pop	{r3}
 8000910:	469e      	mov	lr, r3
 8000912:	4770      	bx	lr

08000914 <_fini>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr
