
conversores_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001534  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080016c4  080016c4  000026c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800170c  0800170c  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800170c  0800170c  0000270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001714  08001714  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001714  08001714  00002714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001718  08001718  00002718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800171c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          00000170  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00003060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000292c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008cf  00000000  00000000  000059bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  00006290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000278  00000000  00000000  00006600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201a5  00000000  00000000  00006878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003f18  00000000  00000000  00026a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c194d  00000000  00000000  0002a935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ec282  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013d0  00000000  00000000  000ec2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  000ed698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080016ac 	.word	0x080016ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080016ac 	.word	0x080016ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f003 0307 	and.w	r3, r3, #7
 800027e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800028c:	4013      	ands	r3, r2
 800028e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800029c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002a2:	4a04      	ldr	r2, [pc, #16]	@ (80002b4 <__NVIC_SetPriorityGrouping+0x44>)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	60d3      	str	r3, [r2, #12]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <Utility_Init>:
//Declarações de funções úteis

//Funções de configuração do sistema de clock do STM32
//Inicialização de funções da biblioteca
void Utility_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	Configure_Clock();	//inicializa o sistema de clock
 80002bc:	f000 f804 	bl	80002c8 <Configure_Clock>
	TIM2_Setup();		//configura o Timer2 como base de tempo de 1us
 80002c0:	f000 f86c 	bl	800039c <TIM2_Setup>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <Configure_Clock>:
//HCLK = 168 MHz
//APB1 = 42 MHz
//APB2 = 84 MHz
//USB, RNG, SDIO = 48 MHz
void Configure_Clock(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	#define PLL_N	168
	#define PLL_P	2
	#define PLL_Q	7

	//Configurações da Flash e do regulador de tensão para permitir operação em alta velocidade
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;	//habilita prefetch, caches e a latência da flash
 80002cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000388 <Configure_Clock+0xc0>)
 80002ce:	f240 7205 	movw	r2, #1797	@ 0x705
 80002d2:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;	//habilita o clock da interface de energia
 80002d4:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <Configure_Clock+0xc4>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d8:	4a2c      	ldr	r2, [pc, #176]	@ (800038c <Configure_Clock+0xc4>)
 80002da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002de:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;				//regulador de tensão no modo 2
 80002e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000390 <Configure_Clock+0xc8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000390 <Configure_Clock+0xc8>)
 80002e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002ea:	6013      	str	r3, [r2, #0]

	//Configuração do modo de agrupamento de prioridades das interrupções
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002ec:	2003      	movs	r0, #3
 80002ee:	f7ff ffbf 	bl	8000270 <__NVIC_SetPriorityGrouping>

	//Reseta os registradores do módulo RCC para o estado inicial
	RCC->CIR = 0;				//desabilita todas as interrupções de RCC
 80002f2:	4b26      	ldr	r3, [pc, #152]	@ (800038c <Configure_Clock+0xc4>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_HSION;	//liga o oscilador HSI
 80002f8:	4b24      	ldr	r3, [pc, #144]	@ (800038c <Configure_Clock+0xc4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a23      	ldr	r2, [pc, #140]	@ (800038c <Configure_Clock+0xc4>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
	RCC->CFGR = 0;				//reseta o registrador CFGR
 8000304:	4b21      	ldr	r3, [pc, #132]	@ (800038c <Configure_Clock+0xc4>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
	//Desliga HSE, CSS e o PLL e o bypass de HSE
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON | RCC_CR_HSEBYP);
 800030a:	4b20      	ldr	r3, [pc, #128]	@ (800038c <Configure_Clock+0xc4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a1f      	ldr	r2, [pc, #124]	@ (800038c <Configure_Clock+0xc4>)
 8000310:	f023 7386 	bic.w	r3, r3, #17563648	@ 0x10c0000
 8000314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000318:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x24003010;	//reseta o registrador PLLCFGR
 800031a:	4b1c      	ldr	r3, [pc, #112]	@ (800038c <Configure_Clock+0xc4>)
 800031c:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <Configure_Clock+0xcc>)
 800031e:	605a      	str	r2, [r3, #4]

	//Configura a fonte de clock (HSE), os parâmetros do PLL e prescalers dos barramentos AHB, APB
	RCC->CR |= RCC_CR_HSEON;				//habilita HSE
 8000320:	4b1a      	ldr	r3, [pc, #104]	@ (800038c <Configure_Clock+0xc4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a19      	ldr	r2, [pc, #100]	@ (800038c <Configure_Clock+0xc4>)
 8000326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800032a:	6013      	str	r3, [r2, #0]
	while(!((RCC->CR) & RCC_CR_HSERDY));	//espera HSE ficar pronto
 800032c:	bf00      	nop
 800032e:	4b17      	ldr	r3, [pc, #92]	@ (800038c <Configure_Clock+0xc4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <Configure_Clock+0x66>
    RCC->CFGR |= 0x9400;	//HCLK = SYSCLK/1, PCLK2 = HCLK/2, PCLK1 = HCLK/4
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <Configure_Clock+0xc4>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	4a13      	ldr	r2, [pc, #76]	@ (800038c <Configure_Clock+0xc4>)
 8000340:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 8000344:	6093      	str	r3, [r2, #8]

    //Configura a fonte de clock e os parâmetros do PLL principal
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (0x400000) | (PLL_Q << 24);
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <Configure_Clock+0xc4>)
 8000348:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <Configure_Clock+0xd0>)
 800034a:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON;			//habilita o PLL
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <Configure_Clock+0xc4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <Configure_Clock+0xc4>)
 8000352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000356:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));	//espera o PLL ficar pronto verificando a flag PLLRDY
 8000358:	bf00      	nop
 800035a:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <Configure_Clock+0xc4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <Configure_Clock+0x92>

    RCC->CFGR |= 0x2;					//seleciona o PLL como fonte de SYSCLK
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <Configure_Clock+0xc4>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	4a08      	ldr	r2, [pc, #32]	@ (800038c <Configure_Clock+0xc4>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & 0xC) != 0x8);	//espera o PLL ser a fonte de SYSCLK
 8000372:	bf00      	nop
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <Configure_Clock+0xc4>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f003 030c 	and.w	r3, r3, #12
 800037c:	2b08      	cmp	r3, #8
 800037e:	d1f9      	bne.n	8000374 <Configure_Clock+0xac>
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40023c00 	.word	0x40023c00
 800038c:	40023800 	.word	0x40023800
 8000390:	40007000 	.word	0x40007000
 8000394:	24003010 	.word	0x24003010
 8000398:	07402a04 	.word	0x07402a04

0800039c <TIM2_Setup>:


//Funções de timers e temporização
//Configura o timer 2 como base de tempo de 1us
void TIM2_Setup(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	//O modo padrão do contador é com contagem crescente
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	//liga o clock do Timer2
 80003a0:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <TIM2_Setup+0x3c>)
 80003a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a4:	4a0c      	ldr	r2, [pc, #48]	@ (80003d8 <TIM2_Setup+0x3c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 83;						//prescaler para incrementos a cada 1uS
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b0:	2253      	movs	r2, #83	@ 0x53
 80003b2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->EGR = TIM_EGR_UG;				//update event para escrever o valor do prescaler
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b8:	2201      	movs	r2, #1
 80003ba:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;			//habilita o timer
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800

080003dc <Delay_ms>:
	while(TIM2->CNT < delay);	//aguarda o tempo passar
}

//Criação de atraso em ms
void Delay_ms(uint32_t delay)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint32_t max = 1000*delay;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003ea:	fb02 f303 	mul.w	r3, r2, r3
 80003ee:	60fb      	str	r3, [r7, #12]
	TIM2->CNT = 0;				//inicializa o contador com 0
 80003f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f4:	2200      	movs	r2, #0
 80003f6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < max);		//aguarda o tempo passar
 80003f8:	bf00      	nop
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8f9      	bhi.n	80003fa <Delay_ms+0x1e>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <GPIO_Clock_Enable>:


//Funções de manipulação de GPIO
//Habilita o clock de um GPIO
void GPIO_Clock_Enable(GPIO_TypeDef* GPIOx)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1 << ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)));
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <GPIO_Clock_Enable+0x30>)
 800041e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 8000426:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800042a:	0a9b      	lsrs	r3, r3, #10
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	4904      	ldr	r1, [pc, #16]	@ (8000444 <GPIO_Clock_Enable+0x30>)
 8000434:	4313      	orrs	r3, r2
 8000436:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40023800 	.word	0x40023800

08000448 <GPIO_Pin_Mode>:

//Configura o modo de operação de um pino de um GPIO
void GPIO_Pin_Mode(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
 8000454:	4613      	mov	r3, r2
 8000456:	70bb      	strb	r3, [r7, #2]
	GPIOx->MODER &= ~(0b11 << 2*pin);	//reseta os 2 bits do modo de operação
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	78fa      	ldrb	r2, [r7, #3]
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	2103      	movs	r1, #3
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	43d2      	mvns	r2, r2
 8000468:	401a      	ands	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << 2*pin);	//configura o modo selecionado
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	78b9      	ldrb	r1, [r7, #2]
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
	...

08000490 <USART1_Init>:


//Funções de periféricos de comunicação
//Configuração básica da USART1
void USART1_Init(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	//Configuração da USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;				//habilita o clock da USART1
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <USART1_Init+0x54>)
 8000496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000498:	4a12      	ldr	r2, [pc, #72]	@ (80004e4 <USART1_Init+0x54>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6453      	str	r3, [r2, #68]	@ 0x44
	USART1->BRR = 84;									//ajusta baud rate para 1 Mbps (frequência do periférico de 84MHz)
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <USART1_Init+0x58>)
 80004a2:	2254      	movs	r2, #84	@ 0x54
 80004a4:	609a      	str	r2, [r3, #8]
	//O estado default do registrador USART1->CR1 garante:
	//1 stop bit, 8 bits de dados, sem bit de paridade,
	//oversampling de 16 amostras por bit
	USART1->CR1 |= (USART_CR1_TE | USART_CR1_UE);		//habilita apenas o transmissor e a USART1
 80004a6:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <USART1_Init+0x58>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <USART1_Init+0x58>)
 80004ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	60d3      	str	r3, [r2, #12]
	//Habilita a interrupção da USART1 no NVIC
	//NVIC_SetPriority(USART1_IRQn, 0);	//seta a prioridade da USART1
	//NVIC_EnableIRQ(USART1_IRQn);		//habilita a interrupção da USART1

	//Configuração dos pinos PA9 (TX) e PA10(RX)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			//habilita o clock do GPIOA
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <USART1_Init+0x54>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <USART1_Init+0x54>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (0b10 << 20) | (0b10 << 18);	//pinos PA10 e PA9 em função alternativa
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <USART1_Init+0x5c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a09      	ldr	r2, [pc, #36]	@ (80004ec <USART1_Init+0x5c>)
 80004c8:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80004cc:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (0b0111 << 8) | (0b0111 << 4);	//função alternativa 7 (USART1)
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <USART1_Init+0x5c>)
 80004d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d2:	4a06      	ldr	r2, [pc, #24]	@ (80004ec <USART1_Init+0x5c>)
 80004d4:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80004d8:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40020000 	.word	0x40020000

080004f0 <__io_putchar>:

//Redefinição da função de envio de dados pela USART1
int __io_putchar(int ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	USART1->DR = ch;						//transmite o dado
 80004f8:	4a08      	ldr	r2, [pc, #32]	@ (800051c <__io_putchar+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE));	//espera pelo fim da transmissão
 80004fe:	bf00      	nop
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <__io_putchar+0x2c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <__io_putchar+0x10>
	return ch;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40011000 	.word	0x40011000

08000520 <__io_getchar>:

//Redefinição da função de recebimento de dados pela USART1
int __io_getchar(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
   return (uint16_t)(USART1->DR);	//lê o dado recebido
 8000524:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <__io_getchar+0x14>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	b29b      	uxth	r3, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40011000 	.word	0x40011000

08000538 <USART1_IRQHandler>:

//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32f407vetx.s
void USART1_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());	//lê o dado e reenvia pela USART1
 800053c:	f7ff fff0 	bl	8000520 <__io_getchar>
 8000540:	4603      	mov	r3, r0
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ffd4 	bl	80004f0 <__io_putchar>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <setup>:
#include "main.h"
#include "Utility.h"
#include <stdio.h>


void setup(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

	Utility_Init();
 8000550:	f7ff feb2 	bl	80002b8 <Utility_Init>
	USART1_Init();
 8000554:	f7ff ff9c 	bl	8000490 <USART1_Init>

	// Habilita o clock do GPIOA
	GPIO_Clock_Enable(GPIOA);
 8000558:	4816      	ldr	r0, [pc, #88]	@ (80005b4 <setup+0x68>)
 800055a:	f7ff ff5b 	bl	8000414 <GPIO_Clock_Enable>
	// Pino PA0 como entrada analógica
	GPIO_Pin_Mode(GPIOA, PIN_0, ANALOG);
 800055e:	2203      	movs	r2, #3
 8000560:	2100      	movs	r1, #0
 8000562:	4814      	ldr	r0, [pc, #80]	@ (80005b4 <setup+0x68>)
 8000564:	f7ff ff70 	bl	8000448 <GPIO_Pin_Mode>

	// Configuração do ADC

	// Liga o Clock da Interface digital do ADC1
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000568:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <setup+0x6c>)
 800056a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800056c:	4a12      	ldr	r2, [pc, #72]	@ (80005b8 <setup+0x6c>)
 800056e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000572:	6453      	str	r3, [r2, #68]	@ 0x44
	// Seleciona o PRESCALER de 4 - 21 MHz (ADCPRE)
	ADC->CCR |= 0b01 << 16;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <setup+0x70>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4a10      	ldr	r2, [pc, #64]	@ (80005bc <setup+0x70>)
 800057a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800057e:	6053      	str	r3, [r2, #4]
	// Seleciona a conversão de um único canal
	ADC1->SQR1 &= (0xF << 20);
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <setup+0x74>)
 8000582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000584:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <setup+0x74>)
 8000586:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800058a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	// Seleciona o canal que vai ser convertido
	ADC1->SQR3 &= ~(0x1F);
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <setup+0x74>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000590:	4a0b      	ldr	r2, [pc, #44]	@ (80005c0 <setup+0x74>)
 8000592:	f023 031f 	bic.w	r3, r3, #31
 8000596:	6353      	str	r3, [r2, #52]	@ 0x34
	// Seleciona o tempo de amostragem
	ADC1->SMPR2 |= 0b111;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <setup+0x74>)
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <setup+0x74>)
 800059e:	f043 0307 	orr.w	r3, r3, #7
 80005a2:	6113      	str	r3, [r2, #16]
	// Liga o conversor
	ADC1->CR2 |= ADC_CR2_ADON;
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <setup+0x74>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <setup+0x74>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6093      	str	r3, [r2, #8]


}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40012300 	.word	0x40012300
 80005c0:	40012000 	.word	0x40012000

080005c4 <main>:



int main(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

	setup();
 80005ca:	f7ff ffbf 	bl	800054c <setup>

	while(1){

		// Inicia a conversão
		ADC1->CR2 |= ADC_CR2_SWSTART;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <main+0x40>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <main+0x40>)
 80005d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005d8:	6093      	str	r3, [r2, #8]
		// Aguarda o fim da conversão
		while (!(ADC1->SR & ADC_SR_EOC));
 80005da:	bf00      	nop
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <main+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f003 0302 	and.w	r3, r3, #2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f9      	beq.n	80005dc <main+0x18>

		// Faz a leitura do valor convertido
		uint16_t leitura = ADC1->DR;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <main+0x40>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	80fb      	strh	r3, [r7, #6]

		printf("Valor convertido %d\n", leitura);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x44>)
 80005f4:	f000 f9ee 	bl	80009d4 <iprintf>
		Delay_ms(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fc:	f7ff feee 	bl	80003dc <Delay_ms>
	while(1){
 8000600:	e7e5      	b.n	80005ce <main+0xa>
 8000602:	bf00      	nop
 8000604:	40012000 	.word	0x40012000
 8000608:	080016c4 	.word	0x080016c4

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <MemManage_Handler+0x4>

08000624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f8e1 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}

0800066a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e00a      	b.n	8000692 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067c:	f7ff ff50 	bl	8000520 <__io_getchar>
 8000680:	4601      	mov	r1, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	60ba      	str	r2, [r7, #8]
 8000688:	b2ca      	uxtb	r2, r1
 800068a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf0      	blt.n	800067c <_read+0x12>
  }

  return len;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e009      	b.n	80006ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff16 	bl	80004f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbf1      	blt.n	80006b6 <_write+0x12>
  }
  return len;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_close>:

int _close(int file)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000704:	605a      	str	r2, [r3, #4]
  return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <_isatty>:

int _isatty(int file)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f000 f9d2 	bl	8000b1c <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20020000 	.word	0x20020000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	2000007c 	.word	0x2000007c
 80007ac:	200001d0 	.word	0x200001d0

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <SystemInit+0x20>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ba:	4a05      	ldr	r2, [pc, #20]	@ (80007d0 <SystemInit+0x20>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800080c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007d8:	f7ff ffea 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f000 f991 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000806:	f7ff fedd 	bl	80005c4 <main>
  bx  lr    
 800080a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800080c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000818:	0800171c 	.word	0x0800171c
  ldr r2, =_sbss
 800081c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000820:	200001d0 	.word	0x200001d0

08000824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC_IRQHandler>
	...

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	20000080 	.word	0x20000080

08000850 <std>:
 8000850:	2300      	movs	r3, #0
 8000852:	b510      	push	{r4, lr}
 8000854:	4604      	mov	r4, r0
 8000856:	e9c0 3300 	strd	r3, r3, [r0]
 800085a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800085e:	6083      	str	r3, [r0, #8]
 8000860:	8181      	strh	r1, [r0, #12]
 8000862:	6643      	str	r3, [r0, #100]	@ 0x64
 8000864:	81c2      	strh	r2, [r0, #14]
 8000866:	6183      	str	r3, [r0, #24]
 8000868:	4619      	mov	r1, r3
 800086a:	2208      	movs	r2, #8
 800086c:	305c      	adds	r0, #92	@ 0x5c
 800086e:	f000 f906 	bl	8000a7e <memset>
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <std+0x58>)
 8000874:	6263      	str	r3, [r4, #36]	@ 0x24
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <std+0x5c>)
 8000878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <std+0x60>)
 800087c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <std+0x64>)
 8000880:	6323      	str	r3, [r4, #48]	@ 0x30
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <std+0x68>)
 8000884:	6224      	str	r4, [r4, #32]
 8000886:	429c      	cmp	r4, r3
 8000888:	d006      	beq.n	8000898 <std+0x48>
 800088a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800088e:	4294      	cmp	r4, r2
 8000890:	d002      	beq.n	8000898 <std+0x48>
 8000892:	33d0      	adds	r3, #208	@ 0xd0
 8000894:	429c      	cmp	r4, r3
 8000896:	d105      	bne.n	80008a4 <std+0x54>
 8000898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800089c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a0:	f000 b966 	b.w	8000b70 <__retarget_lock_init_recursive>
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	bf00      	nop
 80008a8:	080009f9 	.word	0x080009f9
 80008ac:	08000a1b 	.word	0x08000a1b
 80008b0:	08000a53 	.word	0x08000a53
 80008b4:	08000a77 	.word	0x08000a77
 80008b8:	20000084 	.word	0x20000084

080008bc <stdio_exit_handler>:
 80008bc:	4a02      	ldr	r2, [pc, #8]	@ (80008c8 <stdio_exit_handler+0xc>)
 80008be:	4903      	ldr	r1, [pc, #12]	@ (80008cc <stdio_exit_handler+0x10>)
 80008c0:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <stdio_exit_handler+0x14>)
 80008c2:	f000 b869 	b.w	8000998 <_fwalk_sglue>
 80008c6:	bf00      	nop
 80008c8:	20000004 	.word	0x20000004
 80008cc:	0800140d 	.word	0x0800140d
 80008d0:	20000014 	.word	0x20000014

080008d4 <cleanup_stdio>:
 80008d4:	6841      	ldr	r1, [r0, #4]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <cleanup_stdio+0x34>)
 80008d8:	4299      	cmp	r1, r3
 80008da:	b510      	push	{r4, lr}
 80008dc:	4604      	mov	r4, r0
 80008de:	d001      	beq.n	80008e4 <cleanup_stdio+0x10>
 80008e0:	f000 fd94 	bl	800140c <_fflush_r>
 80008e4:	68a1      	ldr	r1, [r4, #8]
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <cleanup_stdio+0x38>)
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d002      	beq.n	80008f2 <cleanup_stdio+0x1e>
 80008ec:	4620      	mov	r0, r4
 80008ee:	f000 fd8d 	bl	800140c <_fflush_r>
 80008f2:	68e1      	ldr	r1, [r4, #12]
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <cleanup_stdio+0x3c>)
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d004      	beq.n	8000904 <cleanup_stdio+0x30>
 80008fa:	4620      	mov	r0, r4
 80008fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000900:	f000 bd84 	b.w	800140c <_fflush_r>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	20000084 	.word	0x20000084
 800090c:	200000ec 	.word	0x200000ec
 8000910:	20000154 	.word	0x20000154

08000914 <global_stdio_init.part.0>:
 8000914:	b510      	push	{r4, lr}
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <global_stdio_init.part.0+0x30>)
 8000918:	4c0b      	ldr	r4, [pc, #44]	@ (8000948 <global_stdio_init.part.0+0x34>)
 800091a:	4a0c      	ldr	r2, [pc, #48]	@ (800094c <global_stdio_init.part.0+0x38>)
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	4620      	mov	r0, r4
 8000920:	2200      	movs	r2, #0
 8000922:	2104      	movs	r1, #4
 8000924:	f7ff ff94 	bl	8000850 <std>
 8000928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800092c:	2201      	movs	r2, #1
 800092e:	2109      	movs	r1, #9
 8000930:	f7ff ff8e 	bl	8000850 <std>
 8000934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000938:	2202      	movs	r2, #2
 800093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800093e:	2112      	movs	r1, #18
 8000940:	f7ff bf86 	b.w	8000850 <std>
 8000944:	200001bc 	.word	0x200001bc
 8000948:	20000084 	.word	0x20000084
 800094c:	080008bd 	.word	0x080008bd

08000950 <__sfp_lock_acquire>:
 8000950:	4801      	ldr	r0, [pc, #4]	@ (8000958 <__sfp_lock_acquire+0x8>)
 8000952:	f000 b90e 	b.w	8000b72 <__retarget_lock_acquire_recursive>
 8000956:	bf00      	nop
 8000958:	200001c5 	.word	0x200001c5

0800095c <__sfp_lock_release>:
 800095c:	4801      	ldr	r0, [pc, #4]	@ (8000964 <__sfp_lock_release+0x8>)
 800095e:	f000 b909 	b.w	8000b74 <__retarget_lock_release_recursive>
 8000962:	bf00      	nop
 8000964:	200001c5 	.word	0x200001c5

08000968 <__sinit>:
 8000968:	b510      	push	{r4, lr}
 800096a:	4604      	mov	r4, r0
 800096c:	f7ff fff0 	bl	8000950 <__sfp_lock_acquire>
 8000970:	6a23      	ldr	r3, [r4, #32]
 8000972:	b11b      	cbz	r3, 800097c <__sinit+0x14>
 8000974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000978:	f7ff bff0 	b.w	800095c <__sfp_lock_release>
 800097c:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <__sinit+0x28>)
 800097e:	6223      	str	r3, [r4, #32]
 8000980:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <__sinit+0x2c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1f5      	bne.n	8000974 <__sinit+0xc>
 8000988:	f7ff ffc4 	bl	8000914 <global_stdio_init.part.0>
 800098c:	e7f2      	b.n	8000974 <__sinit+0xc>
 800098e:	bf00      	nop
 8000990:	080008d5 	.word	0x080008d5
 8000994:	200001bc 	.word	0x200001bc

08000998 <_fwalk_sglue>:
 8000998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800099c:	4607      	mov	r7, r0
 800099e:	4688      	mov	r8, r1
 80009a0:	4614      	mov	r4, r2
 80009a2:	2600      	movs	r6, #0
 80009a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009a8:	f1b9 0901 	subs.w	r9, r9, #1
 80009ac:	d505      	bpl.n	80009ba <_fwalk_sglue+0x22>
 80009ae:	6824      	ldr	r4, [r4, #0]
 80009b0:	2c00      	cmp	r4, #0
 80009b2:	d1f7      	bne.n	80009a4 <_fwalk_sglue+0xc>
 80009b4:	4630      	mov	r0, r6
 80009b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009ba:	89ab      	ldrh	r3, [r5, #12]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d907      	bls.n	80009d0 <_fwalk_sglue+0x38>
 80009c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009c4:	3301      	adds	r3, #1
 80009c6:	d003      	beq.n	80009d0 <_fwalk_sglue+0x38>
 80009c8:	4629      	mov	r1, r5
 80009ca:	4638      	mov	r0, r7
 80009cc:	47c0      	blx	r8
 80009ce:	4306      	orrs	r6, r0
 80009d0:	3568      	adds	r5, #104	@ 0x68
 80009d2:	e7e9      	b.n	80009a8 <_fwalk_sglue+0x10>

080009d4 <iprintf>:
 80009d4:	b40f      	push	{r0, r1, r2, r3}
 80009d6:	b507      	push	{r0, r1, r2, lr}
 80009d8:	4906      	ldr	r1, [pc, #24]	@ (80009f4 <iprintf+0x20>)
 80009da:	ab04      	add	r3, sp, #16
 80009dc:	6808      	ldr	r0, [r1, #0]
 80009de:	f853 2b04 	ldr.w	r2, [r3], #4
 80009e2:	6881      	ldr	r1, [r0, #8]
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	f000 f9e9 	bl	8000dbc <_vfiprintf_r>
 80009ea:	b003      	add	sp, #12
 80009ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr
 80009f4:	20000010 	.word	0x20000010

080009f8 <__sread>:
 80009f8:	b510      	push	{r4, lr}
 80009fa:	460c      	mov	r4, r1
 80009fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a00:	f000 f868 	bl	8000ad4 <_read_r>
 8000a04:	2800      	cmp	r0, #0
 8000a06:	bfab      	itete	ge
 8000a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a0c:	181b      	addge	r3, r3, r0
 8000a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a12:	bfac      	ite	ge
 8000a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a16:	81a3      	strhlt	r3, [r4, #12]
 8000a18:	bd10      	pop	{r4, pc}

08000a1a <__swrite>:
 8000a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1e:	461f      	mov	r7, r3
 8000a20:	898b      	ldrh	r3, [r1, #12]
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	4605      	mov	r5, r0
 8000a26:	460c      	mov	r4, r1
 8000a28:	4616      	mov	r6, r2
 8000a2a:	d505      	bpl.n	8000a38 <__swrite+0x1e>
 8000a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a30:	2302      	movs	r3, #2
 8000a32:	2200      	movs	r2, #0
 8000a34:	f000 f83c 	bl	8000ab0 <_lseek_r>
 8000a38:	89a3      	ldrh	r3, [r4, #12]
 8000a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a42:	81a3      	strh	r3, [r4, #12]
 8000a44:	4632      	mov	r2, r6
 8000a46:	463b      	mov	r3, r7
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4e:	f000 b853 	b.w	8000af8 <_write_r>

08000a52 <__sseek>:
 8000a52:	b510      	push	{r4, lr}
 8000a54:	460c      	mov	r4, r1
 8000a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a5a:	f000 f829 	bl	8000ab0 <_lseek_r>
 8000a5e:	1c43      	adds	r3, r0, #1
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	bf15      	itete	ne
 8000a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a6e:	81a3      	strheq	r3, [r4, #12]
 8000a70:	bf18      	it	ne
 8000a72:	81a3      	strhne	r3, [r4, #12]
 8000a74:	bd10      	pop	{r4, pc}

08000a76 <__sclose>:
 8000a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a7a:	f000 b809 	b.w	8000a90 <_close_r>

08000a7e <memset>:
 8000a7e:	4402      	add	r2, r0
 8000a80:	4603      	mov	r3, r0
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d100      	bne.n	8000a88 <memset+0xa>
 8000a86:	4770      	bx	lr
 8000a88:	f803 1b01 	strb.w	r1, [r3], #1
 8000a8c:	e7f9      	b.n	8000a82 <memset+0x4>
	...

08000a90 <_close_r>:
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4d06      	ldr	r5, [pc, #24]	@ (8000aac <_close_r+0x1c>)
 8000a94:	2300      	movs	r3, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	602b      	str	r3, [r5, #0]
 8000a9c:	f7ff fe1e 	bl	80006dc <_close>
 8000aa0:	1c43      	adds	r3, r0, #1
 8000aa2:	d102      	bne.n	8000aaa <_close_r+0x1a>
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	b103      	cbz	r3, 8000aaa <_close_r+0x1a>
 8000aa8:	6023      	str	r3, [r4, #0]
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	200001c0 	.word	0x200001c0

08000ab0 <_lseek_r>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	4d07      	ldr	r5, [pc, #28]	@ (8000ad0 <_lseek_r+0x20>)
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	4611      	mov	r1, r2
 8000aba:	2200      	movs	r2, #0
 8000abc:	602a      	str	r2, [r5, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f7ff fe33 	bl	800072a <_lseek>
 8000ac4:	1c43      	adds	r3, r0, #1
 8000ac6:	d102      	bne.n	8000ace <_lseek_r+0x1e>
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	b103      	cbz	r3, 8000ace <_lseek_r+0x1e>
 8000acc:	6023      	str	r3, [r4, #0]
 8000ace:	bd38      	pop	{r3, r4, r5, pc}
 8000ad0:	200001c0 	.word	0x200001c0

08000ad4 <_read_r>:
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	4d07      	ldr	r5, [pc, #28]	@ (8000af4 <_read_r+0x20>)
 8000ad8:	4604      	mov	r4, r0
 8000ada:	4608      	mov	r0, r1
 8000adc:	4611      	mov	r1, r2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	602a      	str	r2, [r5, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f7ff fdc1 	bl	800066a <_read>
 8000ae8:	1c43      	adds	r3, r0, #1
 8000aea:	d102      	bne.n	8000af2 <_read_r+0x1e>
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	b103      	cbz	r3, 8000af2 <_read_r+0x1e>
 8000af0:	6023      	str	r3, [r4, #0]
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
 8000af4:	200001c0 	.word	0x200001c0

08000af8 <_write_r>:
 8000af8:	b538      	push	{r3, r4, r5, lr}
 8000afa:	4d07      	ldr	r5, [pc, #28]	@ (8000b18 <_write_r+0x20>)
 8000afc:	4604      	mov	r4, r0
 8000afe:	4608      	mov	r0, r1
 8000b00:	4611      	mov	r1, r2
 8000b02:	2200      	movs	r2, #0
 8000b04:	602a      	str	r2, [r5, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	f7ff fdcc 	bl	80006a4 <_write>
 8000b0c:	1c43      	adds	r3, r0, #1
 8000b0e:	d102      	bne.n	8000b16 <_write_r+0x1e>
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	b103      	cbz	r3, 8000b16 <_write_r+0x1e>
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	bd38      	pop	{r3, r4, r5, pc}
 8000b18:	200001c0 	.word	0x200001c0

08000b1c <__errno>:
 8000b1c:	4b01      	ldr	r3, [pc, #4]	@ (8000b24 <__errno+0x8>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000010 	.word	0x20000010

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b60 <__libc_init_array+0x38>)
 8000b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b64 <__libc_init_array+0x3c>)
 8000b2e:	1b64      	subs	r4, r4, r5
 8000b30:	10a4      	asrs	r4, r4, #2
 8000b32:	2600      	movs	r6, #0
 8000b34:	42a6      	cmp	r6, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	4d0b      	ldr	r5, [pc, #44]	@ (8000b68 <__libc_init_array+0x40>)
 8000b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b6c <__libc_init_array+0x44>)
 8000b3c:	f000 fdb6 	bl	80016ac <_init>
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	10a4      	asrs	r4, r4, #2
 8000b44:	2600      	movs	r6, #0
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b50:	4798      	blx	r3
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5a:	4798      	blx	r3
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08001714 	.word	0x08001714
 8000b64:	08001714 	.word	0x08001714
 8000b68:	08001714 	.word	0x08001714
 8000b6c:	08001718 	.word	0x08001718

08000b70 <__retarget_lock_init_recursive>:
 8000b70:	4770      	bx	lr

08000b72 <__retarget_lock_acquire_recursive>:
 8000b72:	4770      	bx	lr

08000b74 <__retarget_lock_release_recursive>:
 8000b74:	4770      	bx	lr
	...

08000b78 <_free_r>:
 8000b78:	b538      	push	{r3, r4, r5, lr}
 8000b7a:	4605      	mov	r5, r0
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d041      	beq.n	8000c04 <_free_r+0x8c>
 8000b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b84:	1f0c      	subs	r4, r1, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfb8      	it	lt
 8000b8a:	18e4      	addlt	r4, r4, r3
 8000b8c:	f000 f8e0 	bl	8000d50 <__malloc_lock>
 8000b90:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <_free_r+0x90>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	b933      	cbnz	r3, 8000ba4 <_free_r+0x2c>
 8000b96:	6063      	str	r3, [r4, #4]
 8000b98:	6014      	str	r4, [r2, #0]
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba0:	f000 b8dc 	b.w	8000d5c <__malloc_unlock>
 8000ba4:	42a3      	cmp	r3, r4
 8000ba6:	d908      	bls.n	8000bba <_free_r+0x42>
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	1821      	adds	r1, r4, r0
 8000bac:	428b      	cmp	r3, r1
 8000bae:	bf01      	itttt	eq
 8000bb0:	6819      	ldreq	r1, [r3, #0]
 8000bb2:	685b      	ldreq	r3, [r3, #4]
 8000bb4:	1809      	addeq	r1, r1, r0
 8000bb6:	6021      	streq	r1, [r4, #0]
 8000bb8:	e7ed      	b.n	8000b96 <_free_r+0x1e>
 8000bba:	461a      	mov	r2, r3
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	b10b      	cbz	r3, 8000bc4 <_free_r+0x4c>
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	d9fa      	bls.n	8000bba <_free_r+0x42>
 8000bc4:	6811      	ldr	r1, [r2, #0]
 8000bc6:	1850      	adds	r0, r2, r1
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d10b      	bne.n	8000be4 <_free_r+0x6c>
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	4401      	add	r1, r0
 8000bd0:	1850      	adds	r0, r2, r1
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	6011      	str	r1, [r2, #0]
 8000bd6:	d1e0      	bne.n	8000b9a <_free_r+0x22>
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	6053      	str	r3, [r2, #4]
 8000bde:	4408      	add	r0, r1
 8000be0:	6010      	str	r0, [r2, #0]
 8000be2:	e7da      	b.n	8000b9a <_free_r+0x22>
 8000be4:	d902      	bls.n	8000bec <_free_r+0x74>
 8000be6:	230c      	movs	r3, #12
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	e7d6      	b.n	8000b9a <_free_r+0x22>
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	1821      	adds	r1, r4, r0
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf04      	itt	eq
 8000bf4:	6819      	ldreq	r1, [r3, #0]
 8000bf6:	685b      	ldreq	r3, [r3, #4]
 8000bf8:	6063      	str	r3, [r4, #4]
 8000bfa:	bf04      	itt	eq
 8000bfc:	1809      	addeq	r1, r1, r0
 8000bfe:	6021      	streq	r1, [r4, #0]
 8000c00:	6054      	str	r4, [r2, #4]
 8000c02:	e7ca      	b.n	8000b9a <_free_r+0x22>
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	200001cc 	.word	0x200001cc

08000c0c <sbrk_aligned>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8000c4c <sbrk_aligned+0x40>)
 8000c10:	460c      	mov	r4, r1
 8000c12:	6831      	ldr	r1, [r6, #0]
 8000c14:	4605      	mov	r5, r0
 8000c16:	b911      	cbnz	r1, 8000c1e <sbrk_aligned+0x12>
 8000c18:	f000 fcb4 	bl	8001584 <_sbrk_r>
 8000c1c:	6030      	str	r0, [r6, #0]
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4628      	mov	r0, r5
 8000c22:	f000 fcaf 	bl	8001584 <_sbrk_r>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	d103      	bne.n	8000c32 <sbrk_aligned+0x26>
 8000c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8000c2e:	4620      	mov	r0, r4
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	1cc4      	adds	r4, r0, #3
 8000c34:	f024 0403 	bic.w	r4, r4, #3
 8000c38:	42a0      	cmp	r0, r4
 8000c3a:	d0f8      	beq.n	8000c2e <sbrk_aligned+0x22>
 8000c3c:	1a21      	subs	r1, r4, r0
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f000 fca0 	bl	8001584 <_sbrk_r>
 8000c44:	3001      	adds	r0, #1
 8000c46:	d1f2      	bne.n	8000c2e <sbrk_aligned+0x22>
 8000c48:	e7ef      	b.n	8000c2a <sbrk_aligned+0x1e>
 8000c4a:	bf00      	nop
 8000c4c:	200001c8 	.word	0x200001c8

08000c50 <_malloc_r>:
 8000c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c54:	1ccd      	adds	r5, r1, #3
 8000c56:	f025 0503 	bic.w	r5, r5, #3
 8000c5a:	3508      	adds	r5, #8
 8000c5c:	2d0c      	cmp	r5, #12
 8000c5e:	bf38      	it	cc
 8000c60:	250c      	movcc	r5, #12
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	4606      	mov	r6, r0
 8000c66:	db01      	blt.n	8000c6c <_malloc_r+0x1c>
 8000c68:	42a9      	cmp	r1, r5
 8000c6a:	d904      	bls.n	8000c76 <_malloc_r+0x26>
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6033      	str	r3, [r6, #0]
 8000c70:	2000      	movs	r0, #0
 8000c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d4c <_malloc_r+0xfc>
 8000c7a:	f000 f869 	bl	8000d50 <__malloc_lock>
 8000c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c82:	461c      	mov	r4, r3
 8000c84:	bb44      	cbnz	r4, 8000cd8 <_malloc_r+0x88>
 8000c86:	4629      	mov	r1, r5
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f7ff ffbf 	bl	8000c0c <sbrk_aligned>
 8000c8e:	1c43      	adds	r3, r0, #1
 8000c90:	4604      	mov	r4, r0
 8000c92:	d158      	bne.n	8000d46 <_malloc_r+0xf6>
 8000c94:	f8d8 4000 	ldr.w	r4, [r8]
 8000c98:	4627      	mov	r7, r4
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d143      	bne.n	8000d26 <_malloc_r+0xd6>
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d04b      	beq.n	8000d3a <_malloc_r+0xea>
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	eb04 0903 	add.w	r9, r4, r3
 8000cac:	f000 fc6a 	bl	8001584 <_sbrk_r>
 8000cb0:	4581      	cmp	r9, r0
 8000cb2:	d142      	bne.n	8000d3a <_malloc_r+0xea>
 8000cb4:	6821      	ldr	r1, [r4, #0]
 8000cb6:	1a6d      	subs	r5, r5, r1
 8000cb8:	4629      	mov	r1, r5
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f7ff ffa6 	bl	8000c0c <sbrk_aligned>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d03a      	beq.n	8000d3a <_malloc_r+0xea>
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	442b      	add	r3, r5
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	f8d8 3000 	ldr.w	r3, [r8]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	bb62      	cbnz	r2, 8000d2c <_malloc_r+0xdc>
 8000cd2:	f8c8 7000 	str.w	r7, [r8]
 8000cd6:	e00f      	b.n	8000cf8 <_malloc_r+0xa8>
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	1b52      	subs	r2, r2, r5
 8000cdc:	d420      	bmi.n	8000d20 <_malloc_r+0xd0>
 8000cde:	2a0b      	cmp	r2, #11
 8000ce0:	d917      	bls.n	8000d12 <_malloc_r+0xc2>
 8000ce2:	1961      	adds	r1, r4, r5
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	6025      	str	r5, [r4, #0]
 8000ce8:	bf18      	it	ne
 8000cea:	6059      	strne	r1, [r3, #4]
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	bf08      	it	eq
 8000cf0:	f8c8 1000 	streq.w	r1, [r8]
 8000cf4:	5162      	str	r2, [r4, r5]
 8000cf6:	604b      	str	r3, [r1, #4]
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f000 f82f 	bl	8000d5c <__malloc_unlock>
 8000cfe:	f104 000b 	add.w	r0, r4, #11
 8000d02:	1d23      	adds	r3, r4, #4
 8000d04:	f020 0007 	bic.w	r0, r0, #7
 8000d08:	1ac2      	subs	r2, r0, r3
 8000d0a:	bf1c      	itt	ne
 8000d0c:	1a1b      	subne	r3, r3, r0
 8000d0e:	50a3      	strne	r3, [r4, r2]
 8000d10:	e7af      	b.n	8000c72 <_malloc_r+0x22>
 8000d12:	6862      	ldr	r2, [r4, #4]
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	bf0c      	ite	eq
 8000d18:	f8c8 2000 	streq.w	r2, [r8]
 8000d1c:	605a      	strne	r2, [r3, #4]
 8000d1e:	e7eb      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d20:	4623      	mov	r3, r4
 8000d22:	6864      	ldr	r4, [r4, #4]
 8000d24:	e7ae      	b.n	8000c84 <_malloc_r+0x34>
 8000d26:	463c      	mov	r4, r7
 8000d28:	687f      	ldr	r7, [r7, #4]
 8000d2a:	e7b6      	b.n	8000c9a <_malloc_r+0x4a>
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	42a3      	cmp	r3, r4
 8000d32:	d1fb      	bne.n	8000d2c <_malloc_r+0xdc>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6053      	str	r3, [r2, #4]
 8000d38:	e7de      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	6033      	str	r3, [r6, #0]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f000 f80c 	bl	8000d5c <__malloc_unlock>
 8000d44:	e794      	b.n	8000c70 <_malloc_r+0x20>
 8000d46:	6005      	str	r5, [r0, #0]
 8000d48:	e7d6      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d4a:	bf00      	nop
 8000d4c:	200001cc 	.word	0x200001cc

08000d50 <__malloc_lock>:
 8000d50:	4801      	ldr	r0, [pc, #4]	@ (8000d58 <__malloc_lock+0x8>)
 8000d52:	f7ff bf0e 	b.w	8000b72 <__retarget_lock_acquire_recursive>
 8000d56:	bf00      	nop
 8000d58:	200001c4 	.word	0x200001c4

08000d5c <__malloc_unlock>:
 8000d5c:	4801      	ldr	r0, [pc, #4]	@ (8000d64 <__malloc_unlock+0x8>)
 8000d5e:	f7ff bf09 	b.w	8000b74 <__retarget_lock_release_recursive>
 8000d62:	bf00      	nop
 8000d64:	200001c4 	.word	0x200001c4

08000d68 <__sfputc_r>:
 8000d68:	6893      	ldr	r3, [r2, #8]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	b410      	push	{r4}
 8000d70:	6093      	str	r3, [r2, #8]
 8000d72:	da08      	bge.n	8000d86 <__sfputc_r+0x1e>
 8000d74:	6994      	ldr	r4, [r2, #24]
 8000d76:	42a3      	cmp	r3, r4
 8000d78:	db01      	blt.n	8000d7e <__sfputc_r+0x16>
 8000d7a:	290a      	cmp	r1, #10
 8000d7c:	d103      	bne.n	8000d86 <__sfputc_r+0x1e>
 8000d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d82:	f000 bb6b 	b.w	800145c <__swbuf_r>
 8000d86:	6813      	ldr	r3, [r2, #0]
 8000d88:	1c58      	adds	r0, r3, #1
 8000d8a:	6010      	str	r0, [r2, #0]
 8000d8c:	7019      	strb	r1, [r3, #0]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <__sfputs_r>:
 8000d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d98:	4606      	mov	r6, r0
 8000d9a:	460f      	mov	r7, r1
 8000d9c:	4614      	mov	r4, r2
 8000d9e:	18d5      	adds	r5, r2, r3
 8000da0:	42ac      	cmp	r4, r5
 8000da2:	d101      	bne.n	8000da8 <__sfputs_r+0x12>
 8000da4:	2000      	movs	r0, #0
 8000da6:	e007      	b.n	8000db8 <__sfputs_r+0x22>
 8000da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dac:	463a      	mov	r2, r7
 8000dae:	4630      	mov	r0, r6
 8000db0:	f7ff ffda 	bl	8000d68 <__sfputc_r>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d1f3      	bne.n	8000da0 <__sfputs_r+0xa>
 8000db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000dbc <_vfiprintf_r>:
 8000dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	b09d      	sub	sp, #116	@ 0x74
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	4698      	mov	r8, r3
 8000dc8:	4606      	mov	r6, r0
 8000dca:	b118      	cbz	r0, 8000dd4 <_vfiprintf_r+0x18>
 8000dcc:	6a03      	ldr	r3, [r0, #32]
 8000dce:	b90b      	cbnz	r3, 8000dd4 <_vfiprintf_r+0x18>
 8000dd0:	f7ff fdca 	bl	8000968 <__sinit>
 8000dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dd6:	07d9      	lsls	r1, r3, #31
 8000dd8:	d405      	bmi.n	8000de6 <_vfiprintf_r+0x2a>
 8000dda:	89ab      	ldrh	r3, [r5, #12]
 8000ddc:	059a      	lsls	r2, r3, #22
 8000dde:	d402      	bmi.n	8000de6 <_vfiprintf_r+0x2a>
 8000de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000de2:	f7ff fec6 	bl	8000b72 <__retarget_lock_acquire_recursive>
 8000de6:	89ab      	ldrh	r3, [r5, #12]
 8000de8:	071b      	lsls	r3, r3, #28
 8000dea:	d501      	bpl.n	8000df0 <_vfiprintf_r+0x34>
 8000dec:	692b      	ldr	r3, [r5, #16]
 8000dee:	b99b      	cbnz	r3, 8000e18 <_vfiprintf_r+0x5c>
 8000df0:	4629      	mov	r1, r5
 8000df2:	4630      	mov	r0, r6
 8000df4:	f000 fb70 	bl	80014d8 <__swsetup_r>
 8000df8:	b170      	cbz	r0, 8000e18 <_vfiprintf_r+0x5c>
 8000dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dfc:	07dc      	lsls	r4, r3, #31
 8000dfe:	d504      	bpl.n	8000e0a <_vfiprintf_r+0x4e>
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	b01d      	add	sp, #116	@ 0x74
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e0a:	89ab      	ldrh	r3, [r5, #12]
 8000e0c:	0598      	lsls	r0, r3, #22
 8000e0e:	d4f7      	bmi.n	8000e00 <_vfiprintf_r+0x44>
 8000e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e12:	f7ff feaf 	bl	8000b74 <__retarget_lock_release_recursive>
 8000e16:	e7f3      	b.n	8000e00 <_vfiprintf_r+0x44>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e26:	2330      	movs	r3, #48	@ 0x30
 8000e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000fd8 <_vfiprintf_r+0x21c>
 8000e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e30:	f04f 0901 	mov.w	r9, #1
 8000e34:	4623      	mov	r3, r4
 8000e36:	469a      	mov	sl, r3
 8000e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e3c:	b10a      	cbz	r2, 8000e42 <_vfiprintf_r+0x86>
 8000e3e:	2a25      	cmp	r2, #37	@ 0x25
 8000e40:	d1f9      	bne.n	8000e36 <_vfiprintf_r+0x7a>
 8000e42:	ebba 0b04 	subs.w	fp, sl, r4
 8000e46:	d00b      	beq.n	8000e60 <_vfiprintf_r+0xa4>
 8000e48:	465b      	mov	r3, fp
 8000e4a:	4622      	mov	r2, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	4630      	mov	r0, r6
 8000e50:	f7ff ffa1 	bl	8000d96 <__sfputs_r>
 8000e54:	3001      	adds	r0, #1
 8000e56:	f000 80a7 	beq.w	8000fa8 <_vfiprintf_r+0x1ec>
 8000e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e5c:	445a      	add	r2, fp
 8000e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e60:	f89a 3000 	ldrb.w	r3, [sl]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 809f 	beq.w	8000fa8 <_vfiprintf_r+0x1ec>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e74:	f10a 0a01 	add.w	sl, sl, #1
 8000e78:	9304      	str	r3, [sp, #16]
 8000e7a:	9307      	str	r3, [sp, #28]
 8000e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e82:	4654      	mov	r4, sl
 8000e84:	2205      	movs	r2, #5
 8000e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e8a:	4853      	ldr	r0, [pc, #332]	@ (8000fd8 <_vfiprintf_r+0x21c>)
 8000e8c:	f7ff f9a0 	bl	80001d0 <memchr>
 8000e90:	9a04      	ldr	r2, [sp, #16]
 8000e92:	b9d8      	cbnz	r0, 8000ecc <_vfiprintf_r+0x110>
 8000e94:	06d1      	lsls	r1, r2, #27
 8000e96:	bf44      	itt	mi
 8000e98:	2320      	movmi	r3, #32
 8000e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e9e:	0713      	lsls	r3, r2, #28
 8000ea0:	bf44      	itt	mi
 8000ea2:	232b      	movmi	r3, #43	@ 0x2b
 8000ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8000eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eae:	d015      	beq.n	8000edc <_vfiprintf_r+0x120>
 8000eb0:	9a07      	ldr	r2, [sp, #28]
 8000eb2:	4654      	mov	r4, sl
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f04f 0c0a 	mov.w	ip, #10
 8000eba:	4621      	mov	r1, r4
 8000ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ec0:	3b30      	subs	r3, #48	@ 0x30
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	d94b      	bls.n	8000f5e <_vfiprintf_r+0x1a2>
 8000ec6:	b1b0      	cbz	r0, 8000ef6 <_vfiprintf_r+0x13a>
 8000ec8:	9207      	str	r2, [sp, #28]
 8000eca:	e014      	b.n	8000ef6 <_vfiprintf_r+0x13a>
 8000ecc:	eba0 0308 	sub.w	r3, r0, r8
 8000ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	9304      	str	r3, [sp, #16]
 8000ed8:	46a2      	mov	sl, r4
 8000eda:	e7d2      	b.n	8000e82 <_vfiprintf_r+0xc6>
 8000edc:	9b03      	ldr	r3, [sp, #12]
 8000ede:	1d19      	adds	r1, r3, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	9103      	str	r1, [sp, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bfbb      	ittet	lt
 8000ee8:	425b      	neglt	r3, r3
 8000eea:	f042 0202 	orrlt.w	r2, r2, #2
 8000eee:	9307      	strge	r3, [sp, #28]
 8000ef0:	9307      	strlt	r3, [sp, #28]
 8000ef2:	bfb8      	it	lt
 8000ef4:	9204      	strlt	r2, [sp, #16]
 8000ef6:	7823      	ldrb	r3, [r4, #0]
 8000ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000efa:	d10a      	bne.n	8000f12 <_vfiprintf_r+0x156>
 8000efc:	7863      	ldrb	r3, [r4, #1]
 8000efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f00:	d132      	bne.n	8000f68 <_vfiprintf_r+0x1ac>
 8000f02:	9b03      	ldr	r3, [sp, #12]
 8000f04:	1d1a      	adds	r2, r3, #4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	9203      	str	r2, [sp, #12]
 8000f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f0e:	3402      	adds	r4, #2
 8000f10:	9305      	str	r3, [sp, #20]
 8000f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000fe8 <_vfiprintf_r+0x22c>
 8000f16:	7821      	ldrb	r1, [r4, #0]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4650      	mov	r0, sl
 8000f1c:	f7ff f958 	bl	80001d0 <memchr>
 8000f20:	b138      	cbz	r0, 8000f32 <_vfiprintf_r+0x176>
 8000f22:	9b04      	ldr	r3, [sp, #16]
 8000f24:	eba0 000a 	sub.w	r0, r0, sl
 8000f28:	2240      	movs	r2, #64	@ 0x40
 8000f2a:	4082      	lsls	r2, r0
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	3401      	adds	r4, #1
 8000f30:	9304      	str	r3, [sp, #16]
 8000f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f36:	4829      	ldr	r0, [pc, #164]	@ (8000fdc <_vfiprintf_r+0x220>)
 8000f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	f7ff f947 	bl	80001d0 <memchr>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d03f      	beq.n	8000fc6 <_vfiprintf_r+0x20a>
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <_vfiprintf_r+0x224>)
 8000f48:	bb1b      	cbnz	r3, 8000f92 <_vfiprintf_r+0x1d6>
 8000f4a:	9b03      	ldr	r3, [sp, #12]
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	f023 0307 	bic.w	r3, r3, #7
 8000f52:	3308      	adds	r3, #8
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f58:	443b      	add	r3, r7
 8000f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f5c:	e76a      	b.n	8000e34 <_vfiprintf_r+0x78>
 8000f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f62:	460c      	mov	r4, r1
 8000f64:	2001      	movs	r0, #1
 8000f66:	e7a8      	b.n	8000eba <_vfiprintf_r+0xfe>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	3401      	adds	r4, #1
 8000f6c:	9305      	str	r3, [sp, #20]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0c0a 	mov.w	ip, #10
 8000f74:	4620      	mov	r0, r4
 8000f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f7a:	3a30      	subs	r2, #48	@ 0x30
 8000f7c:	2a09      	cmp	r2, #9
 8000f7e:	d903      	bls.n	8000f88 <_vfiprintf_r+0x1cc>
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0c6      	beq.n	8000f12 <_vfiprintf_r+0x156>
 8000f84:	9105      	str	r1, [sp, #20]
 8000f86:	e7c4      	b.n	8000f12 <_vfiprintf_r+0x156>
 8000f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e7f0      	b.n	8000f74 <_vfiprintf_r+0x1b8>
 8000f92:	ab03      	add	r3, sp, #12
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	462a      	mov	r2, r5
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <_vfiprintf_r+0x228>)
 8000f9a:	a904      	add	r1, sp, #16
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f3af 8000 	nop.w
 8000fa2:	4607      	mov	r7, r0
 8000fa4:	1c78      	adds	r0, r7, #1
 8000fa6:	d1d6      	bne.n	8000f56 <_vfiprintf_r+0x19a>
 8000fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000faa:	07d9      	lsls	r1, r3, #31
 8000fac:	d405      	bmi.n	8000fba <_vfiprintf_r+0x1fe>
 8000fae:	89ab      	ldrh	r3, [r5, #12]
 8000fb0:	059a      	lsls	r2, r3, #22
 8000fb2:	d402      	bmi.n	8000fba <_vfiprintf_r+0x1fe>
 8000fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fb6:	f7ff fddd 	bl	8000b74 <__retarget_lock_release_recursive>
 8000fba:	89ab      	ldrh	r3, [r5, #12]
 8000fbc:	065b      	lsls	r3, r3, #25
 8000fbe:	f53f af1f 	bmi.w	8000e00 <_vfiprintf_r+0x44>
 8000fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000fc4:	e71e      	b.n	8000e04 <_vfiprintf_r+0x48>
 8000fc6:	ab03      	add	r3, sp, #12
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	462a      	mov	r2, r5
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <_vfiprintf_r+0x228>)
 8000fce:	a904      	add	r1, sp, #16
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f000 f879 	bl	80010c8 <_printf_i>
 8000fd6:	e7e4      	b.n	8000fa2 <_vfiprintf_r+0x1e6>
 8000fd8:	080016d9 	.word	0x080016d9
 8000fdc:	080016e3 	.word	0x080016e3
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	08000d97 	.word	0x08000d97
 8000fe8:	080016df 	.word	0x080016df

08000fec <_printf_common>:
 8000fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	688a      	ldr	r2, [r1, #8]
 8000ff6:	690b      	ldr	r3, [r1, #16]
 8000ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	bfb8      	it	lt
 8001000:	4613      	movlt	r3, r2
 8001002:	6033      	str	r3, [r6, #0]
 8001004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001008:	4607      	mov	r7, r0
 800100a:	460c      	mov	r4, r1
 800100c:	b10a      	cbz	r2, 8001012 <_printf_common+0x26>
 800100e:	3301      	adds	r3, #1
 8001010:	6033      	str	r3, [r6, #0]
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	0699      	lsls	r1, r3, #26
 8001016:	bf42      	ittt	mi
 8001018:	6833      	ldrmi	r3, [r6, #0]
 800101a:	3302      	addmi	r3, #2
 800101c:	6033      	strmi	r3, [r6, #0]
 800101e:	6825      	ldr	r5, [r4, #0]
 8001020:	f015 0506 	ands.w	r5, r5, #6
 8001024:	d106      	bne.n	8001034 <_printf_common+0x48>
 8001026:	f104 0a19 	add.w	sl, r4, #25
 800102a:	68e3      	ldr	r3, [r4, #12]
 800102c:	6832      	ldr	r2, [r6, #0]
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	42ab      	cmp	r3, r5
 8001032:	dc26      	bgt.n	8001082 <_printf_common+0x96>
 8001034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001038:	6822      	ldr	r2, [r4, #0]
 800103a:	3b00      	subs	r3, #0
 800103c:	bf18      	it	ne
 800103e:	2301      	movne	r3, #1
 8001040:	0692      	lsls	r2, r2, #26
 8001042:	d42b      	bmi.n	800109c <_printf_common+0xb0>
 8001044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001048:	4641      	mov	r1, r8
 800104a:	4638      	mov	r0, r7
 800104c:	47c8      	blx	r9
 800104e:	3001      	adds	r0, #1
 8001050:	d01e      	beq.n	8001090 <_printf_common+0xa4>
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	6922      	ldr	r2, [r4, #16]
 8001056:	f003 0306 	and.w	r3, r3, #6
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf02      	ittt	eq
 800105e:	68e5      	ldreq	r5, [r4, #12]
 8001060:	6833      	ldreq	r3, [r6, #0]
 8001062:	1aed      	subeq	r5, r5, r3
 8001064:	68a3      	ldr	r3, [r4, #8]
 8001066:	bf0c      	ite	eq
 8001068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800106c:	2500      	movne	r5, #0
 800106e:	4293      	cmp	r3, r2
 8001070:	bfc4      	itt	gt
 8001072:	1a9b      	subgt	r3, r3, r2
 8001074:	18ed      	addgt	r5, r5, r3
 8001076:	2600      	movs	r6, #0
 8001078:	341a      	adds	r4, #26
 800107a:	42b5      	cmp	r5, r6
 800107c:	d11a      	bne.n	80010b4 <_printf_common+0xc8>
 800107e:	2000      	movs	r0, #0
 8001080:	e008      	b.n	8001094 <_printf_common+0xa8>
 8001082:	2301      	movs	r3, #1
 8001084:	4652      	mov	r2, sl
 8001086:	4641      	mov	r1, r8
 8001088:	4638      	mov	r0, r7
 800108a:	47c8      	blx	r9
 800108c:	3001      	adds	r0, #1
 800108e:	d103      	bne.n	8001098 <_printf_common+0xac>
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001098:	3501      	adds	r5, #1
 800109a:	e7c6      	b.n	800102a <_printf_common+0x3e>
 800109c:	18e1      	adds	r1, r4, r3
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	2030      	movs	r0, #48	@ 0x30
 80010a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80010a6:	4422      	add	r2, r4
 80010a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80010ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80010b0:	3302      	adds	r3, #2
 80010b2:	e7c7      	b.n	8001044 <_printf_common+0x58>
 80010b4:	2301      	movs	r3, #1
 80010b6:	4622      	mov	r2, r4
 80010b8:	4641      	mov	r1, r8
 80010ba:	4638      	mov	r0, r7
 80010bc:	47c8      	blx	r9
 80010be:	3001      	adds	r0, #1
 80010c0:	d0e6      	beq.n	8001090 <_printf_common+0xa4>
 80010c2:	3601      	adds	r6, #1
 80010c4:	e7d9      	b.n	800107a <_printf_common+0x8e>
	...

080010c8 <_printf_i>:
 80010c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010cc:	7e0f      	ldrb	r7, [r1, #24]
 80010ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80010d0:	2f78      	cmp	r7, #120	@ 0x78
 80010d2:	4691      	mov	r9, r2
 80010d4:	4680      	mov	r8, r0
 80010d6:	460c      	mov	r4, r1
 80010d8:	469a      	mov	sl, r3
 80010da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80010de:	d807      	bhi.n	80010f0 <_printf_i+0x28>
 80010e0:	2f62      	cmp	r7, #98	@ 0x62
 80010e2:	d80a      	bhi.n	80010fa <_printf_i+0x32>
 80010e4:	2f00      	cmp	r7, #0
 80010e6:	f000 80d1 	beq.w	800128c <_printf_i+0x1c4>
 80010ea:	2f58      	cmp	r7, #88	@ 0x58
 80010ec:	f000 80b8 	beq.w	8001260 <_printf_i+0x198>
 80010f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80010f8:	e03a      	b.n	8001170 <_printf_i+0xa8>
 80010fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80010fe:	2b15      	cmp	r3, #21
 8001100:	d8f6      	bhi.n	80010f0 <_printf_i+0x28>
 8001102:	a101      	add	r1, pc, #4	@ (adr r1, 8001108 <_printf_i+0x40>)
 8001104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001108:	08001161 	.word	0x08001161
 800110c:	08001175 	.word	0x08001175
 8001110:	080010f1 	.word	0x080010f1
 8001114:	080010f1 	.word	0x080010f1
 8001118:	080010f1 	.word	0x080010f1
 800111c:	080010f1 	.word	0x080010f1
 8001120:	08001175 	.word	0x08001175
 8001124:	080010f1 	.word	0x080010f1
 8001128:	080010f1 	.word	0x080010f1
 800112c:	080010f1 	.word	0x080010f1
 8001130:	080010f1 	.word	0x080010f1
 8001134:	08001273 	.word	0x08001273
 8001138:	0800119f 	.word	0x0800119f
 800113c:	0800122d 	.word	0x0800122d
 8001140:	080010f1 	.word	0x080010f1
 8001144:	080010f1 	.word	0x080010f1
 8001148:	08001295 	.word	0x08001295
 800114c:	080010f1 	.word	0x080010f1
 8001150:	0800119f 	.word	0x0800119f
 8001154:	080010f1 	.word	0x080010f1
 8001158:	080010f1 	.word	0x080010f1
 800115c:	08001235 	.word	0x08001235
 8001160:	6833      	ldr	r3, [r6, #0]
 8001162:	1d1a      	adds	r2, r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6032      	str	r2, [r6, #0]
 8001168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800116c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001170:	2301      	movs	r3, #1
 8001172:	e09c      	b.n	80012ae <_printf_i+0x1e6>
 8001174:	6833      	ldr	r3, [r6, #0]
 8001176:	6820      	ldr	r0, [r4, #0]
 8001178:	1d19      	adds	r1, r3, #4
 800117a:	6031      	str	r1, [r6, #0]
 800117c:	0606      	lsls	r6, r0, #24
 800117e:	d501      	bpl.n	8001184 <_printf_i+0xbc>
 8001180:	681d      	ldr	r5, [r3, #0]
 8001182:	e003      	b.n	800118c <_printf_i+0xc4>
 8001184:	0645      	lsls	r5, r0, #25
 8001186:	d5fb      	bpl.n	8001180 <_printf_i+0xb8>
 8001188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800118c:	2d00      	cmp	r5, #0
 800118e:	da03      	bge.n	8001198 <_printf_i+0xd0>
 8001190:	232d      	movs	r3, #45	@ 0x2d
 8001192:	426d      	negs	r5, r5
 8001194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001198:	4858      	ldr	r0, [pc, #352]	@ (80012fc <_printf_i+0x234>)
 800119a:	230a      	movs	r3, #10
 800119c:	e011      	b.n	80011c2 <_printf_i+0xfa>
 800119e:	6821      	ldr	r1, [r4, #0]
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	0608      	lsls	r0, r1, #24
 80011a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80011a8:	d402      	bmi.n	80011b0 <_printf_i+0xe8>
 80011aa:	0649      	lsls	r1, r1, #25
 80011ac:	bf48      	it	mi
 80011ae:	b2ad      	uxthmi	r5, r5
 80011b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80011b2:	4852      	ldr	r0, [pc, #328]	@ (80012fc <_printf_i+0x234>)
 80011b4:	6033      	str	r3, [r6, #0]
 80011b6:	bf14      	ite	ne
 80011b8:	230a      	movne	r3, #10
 80011ba:	2308      	moveq	r3, #8
 80011bc:	2100      	movs	r1, #0
 80011be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80011c2:	6866      	ldr	r6, [r4, #4]
 80011c4:	60a6      	str	r6, [r4, #8]
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	db05      	blt.n	80011d6 <_printf_i+0x10e>
 80011ca:	6821      	ldr	r1, [r4, #0]
 80011cc:	432e      	orrs	r6, r5
 80011ce:	f021 0104 	bic.w	r1, r1, #4
 80011d2:	6021      	str	r1, [r4, #0]
 80011d4:	d04b      	beq.n	800126e <_printf_i+0x1a6>
 80011d6:	4616      	mov	r6, r2
 80011d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80011dc:	fb03 5711 	mls	r7, r3, r1, r5
 80011e0:	5dc7      	ldrb	r7, [r0, r7]
 80011e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011e6:	462f      	mov	r7, r5
 80011e8:	42bb      	cmp	r3, r7
 80011ea:	460d      	mov	r5, r1
 80011ec:	d9f4      	bls.n	80011d8 <_printf_i+0x110>
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d10b      	bne.n	800120a <_printf_i+0x142>
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	07df      	lsls	r7, r3, #31
 80011f6:	d508      	bpl.n	800120a <_printf_i+0x142>
 80011f8:	6923      	ldr	r3, [r4, #16]
 80011fa:	6861      	ldr	r1, [r4, #4]
 80011fc:	4299      	cmp	r1, r3
 80011fe:	bfde      	ittt	le
 8001200:	2330      	movle	r3, #48	@ 0x30
 8001202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800120a:	1b92      	subs	r2, r2, r6
 800120c:	6122      	str	r2, [r4, #16]
 800120e:	f8cd a000 	str.w	sl, [sp]
 8001212:	464b      	mov	r3, r9
 8001214:	aa03      	add	r2, sp, #12
 8001216:	4621      	mov	r1, r4
 8001218:	4640      	mov	r0, r8
 800121a:	f7ff fee7 	bl	8000fec <_printf_common>
 800121e:	3001      	adds	r0, #1
 8001220:	d14a      	bne.n	80012b8 <_printf_i+0x1f0>
 8001222:	f04f 30ff 	mov.w	r0, #4294967295
 8001226:	b004      	add	sp, #16
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	6023      	str	r3, [r4, #0]
 8001234:	4832      	ldr	r0, [pc, #200]	@ (8001300 <_printf_i+0x238>)
 8001236:	2778      	movs	r7, #120	@ 0x78
 8001238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	6831      	ldr	r1, [r6, #0]
 8001240:	061f      	lsls	r7, r3, #24
 8001242:	f851 5b04 	ldr.w	r5, [r1], #4
 8001246:	d402      	bmi.n	800124e <_printf_i+0x186>
 8001248:	065f      	lsls	r7, r3, #25
 800124a:	bf48      	it	mi
 800124c:	b2ad      	uxthmi	r5, r5
 800124e:	6031      	str	r1, [r6, #0]
 8001250:	07d9      	lsls	r1, r3, #31
 8001252:	bf44      	itt	mi
 8001254:	f043 0320 	orrmi.w	r3, r3, #32
 8001258:	6023      	strmi	r3, [r4, #0]
 800125a:	b11d      	cbz	r5, 8001264 <_printf_i+0x19c>
 800125c:	2310      	movs	r3, #16
 800125e:	e7ad      	b.n	80011bc <_printf_i+0xf4>
 8001260:	4826      	ldr	r0, [pc, #152]	@ (80012fc <_printf_i+0x234>)
 8001262:	e7e9      	b.n	8001238 <_printf_i+0x170>
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	f023 0320 	bic.w	r3, r3, #32
 800126a:	6023      	str	r3, [r4, #0]
 800126c:	e7f6      	b.n	800125c <_printf_i+0x194>
 800126e:	4616      	mov	r6, r2
 8001270:	e7bd      	b.n	80011ee <_printf_i+0x126>
 8001272:	6833      	ldr	r3, [r6, #0]
 8001274:	6825      	ldr	r5, [r4, #0]
 8001276:	6961      	ldr	r1, [r4, #20]
 8001278:	1d18      	adds	r0, r3, #4
 800127a:	6030      	str	r0, [r6, #0]
 800127c:	062e      	lsls	r6, r5, #24
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	d501      	bpl.n	8001286 <_printf_i+0x1be>
 8001282:	6019      	str	r1, [r3, #0]
 8001284:	e002      	b.n	800128c <_printf_i+0x1c4>
 8001286:	0668      	lsls	r0, r5, #25
 8001288:	d5fb      	bpl.n	8001282 <_printf_i+0x1ba>
 800128a:	8019      	strh	r1, [r3, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	6123      	str	r3, [r4, #16]
 8001290:	4616      	mov	r6, r2
 8001292:	e7bc      	b.n	800120e <_printf_i+0x146>
 8001294:	6833      	ldr	r3, [r6, #0]
 8001296:	1d1a      	adds	r2, r3, #4
 8001298:	6032      	str	r2, [r6, #0]
 800129a:	681e      	ldr	r6, [r3, #0]
 800129c:	6862      	ldr	r2, [r4, #4]
 800129e:	2100      	movs	r1, #0
 80012a0:	4630      	mov	r0, r6
 80012a2:	f7fe ff95 	bl	80001d0 <memchr>
 80012a6:	b108      	cbz	r0, 80012ac <_printf_i+0x1e4>
 80012a8:	1b80      	subs	r0, r0, r6
 80012aa:	6060      	str	r0, [r4, #4]
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	6123      	str	r3, [r4, #16]
 80012b0:	2300      	movs	r3, #0
 80012b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012b6:	e7aa      	b.n	800120e <_printf_i+0x146>
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	4632      	mov	r2, r6
 80012bc:	4649      	mov	r1, r9
 80012be:	4640      	mov	r0, r8
 80012c0:	47d0      	blx	sl
 80012c2:	3001      	adds	r0, #1
 80012c4:	d0ad      	beq.n	8001222 <_printf_i+0x15a>
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	079b      	lsls	r3, r3, #30
 80012ca:	d413      	bmi.n	80012f4 <_printf_i+0x22c>
 80012cc:	68e0      	ldr	r0, [r4, #12]
 80012ce:	9b03      	ldr	r3, [sp, #12]
 80012d0:	4298      	cmp	r0, r3
 80012d2:	bfb8      	it	lt
 80012d4:	4618      	movlt	r0, r3
 80012d6:	e7a6      	b.n	8001226 <_printf_i+0x15e>
 80012d8:	2301      	movs	r3, #1
 80012da:	4632      	mov	r2, r6
 80012dc:	4649      	mov	r1, r9
 80012de:	4640      	mov	r0, r8
 80012e0:	47d0      	blx	sl
 80012e2:	3001      	adds	r0, #1
 80012e4:	d09d      	beq.n	8001222 <_printf_i+0x15a>
 80012e6:	3501      	adds	r5, #1
 80012e8:	68e3      	ldr	r3, [r4, #12]
 80012ea:	9903      	ldr	r1, [sp, #12]
 80012ec:	1a5b      	subs	r3, r3, r1
 80012ee:	42ab      	cmp	r3, r5
 80012f0:	dcf2      	bgt.n	80012d8 <_printf_i+0x210>
 80012f2:	e7eb      	b.n	80012cc <_printf_i+0x204>
 80012f4:	2500      	movs	r5, #0
 80012f6:	f104 0619 	add.w	r6, r4, #25
 80012fa:	e7f5      	b.n	80012e8 <_printf_i+0x220>
 80012fc:	080016ea 	.word	0x080016ea
 8001300:	080016fb 	.word	0x080016fb

08001304 <__sflush_r>:
 8001304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130c:	0716      	lsls	r6, r2, #28
 800130e:	4605      	mov	r5, r0
 8001310:	460c      	mov	r4, r1
 8001312:	d454      	bmi.n	80013be <__sflush_r+0xba>
 8001314:	684b      	ldr	r3, [r1, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc02      	bgt.n	8001320 <__sflush_r+0x1c>
 800131a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd48      	ble.n	80013b2 <__sflush_r+0xae>
 8001320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001322:	2e00      	cmp	r6, #0
 8001324:	d045      	beq.n	80013b2 <__sflush_r+0xae>
 8001326:	2300      	movs	r3, #0
 8001328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800132c:	682f      	ldr	r7, [r5, #0]
 800132e:	6a21      	ldr	r1, [r4, #32]
 8001330:	602b      	str	r3, [r5, #0]
 8001332:	d030      	beq.n	8001396 <__sflush_r+0x92>
 8001334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	0759      	lsls	r1, r3, #29
 800133a:	d505      	bpl.n	8001348 <__sflush_r+0x44>
 800133c:	6863      	ldr	r3, [r4, #4]
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001342:	b10b      	cbz	r3, 8001348 <__sflush_r+0x44>
 8001344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001346:	1ad2      	subs	r2, r2, r3
 8001348:	2300      	movs	r3, #0
 800134a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800134c:	6a21      	ldr	r1, [r4, #32]
 800134e:	4628      	mov	r0, r5
 8001350:	47b0      	blx	r6
 8001352:	1c43      	adds	r3, r0, #1
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	d106      	bne.n	8001366 <__sflush_r+0x62>
 8001358:	6829      	ldr	r1, [r5, #0]
 800135a:	291d      	cmp	r1, #29
 800135c:	d82b      	bhi.n	80013b6 <__sflush_r+0xb2>
 800135e:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <__sflush_r+0x104>)
 8001360:	40ca      	lsrs	r2, r1
 8001362:	07d6      	lsls	r6, r2, #31
 8001364:	d527      	bpl.n	80013b6 <__sflush_r+0xb2>
 8001366:	2200      	movs	r2, #0
 8001368:	6062      	str	r2, [r4, #4]
 800136a:	04d9      	lsls	r1, r3, #19
 800136c:	6922      	ldr	r2, [r4, #16]
 800136e:	6022      	str	r2, [r4, #0]
 8001370:	d504      	bpl.n	800137c <__sflush_r+0x78>
 8001372:	1c42      	adds	r2, r0, #1
 8001374:	d101      	bne.n	800137a <__sflush_r+0x76>
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	b903      	cbnz	r3, 800137c <__sflush_r+0x78>
 800137a:	6560      	str	r0, [r4, #84]	@ 0x54
 800137c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800137e:	602f      	str	r7, [r5, #0]
 8001380:	b1b9      	cbz	r1, 80013b2 <__sflush_r+0xae>
 8001382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001386:	4299      	cmp	r1, r3
 8001388:	d002      	beq.n	8001390 <__sflush_r+0x8c>
 800138a:	4628      	mov	r0, r5
 800138c:	f7ff fbf4 	bl	8000b78 <_free_r>
 8001390:	2300      	movs	r3, #0
 8001392:	6363      	str	r3, [r4, #52]	@ 0x34
 8001394:	e00d      	b.n	80013b2 <__sflush_r+0xae>
 8001396:	2301      	movs	r3, #1
 8001398:	4628      	mov	r0, r5
 800139a:	47b0      	blx	r6
 800139c:	4602      	mov	r2, r0
 800139e:	1c50      	adds	r0, r2, #1
 80013a0:	d1c9      	bne.n	8001336 <__sflush_r+0x32>
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0c6      	beq.n	8001336 <__sflush_r+0x32>
 80013a8:	2b1d      	cmp	r3, #29
 80013aa:	d001      	beq.n	80013b0 <__sflush_r+0xac>
 80013ac:	2b16      	cmp	r3, #22
 80013ae:	d11e      	bne.n	80013ee <__sflush_r+0xea>
 80013b0:	602f      	str	r7, [r5, #0]
 80013b2:	2000      	movs	r0, #0
 80013b4:	e022      	b.n	80013fc <__sflush_r+0xf8>
 80013b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	e01b      	b.n	80013f6 <__sflush_r+0xf2>
 80013be:	690f      	ldr	r7, [r1, #16]
 80013c0:	2f00      	cmp	r7, #0
 80013c2:	d0f6      	beq.n	80013b2 <__sflush_r+0xae>
 80013c4:	0793      	lsls	r3, r2, #30
 80013c6:	680e      	ldr	r6, [r1, #0]
 80013c8:	bf08      	it	eq
 80013ca:	694b      	ldreq	r3, [r1, #20]
 80013cc:	600f      	str	r7, [r1, #0]
 80013ce:	bf18      	it	ne
 80013d0:	2300      	movne	r3, #0
 80013d2:	eba6 0807 	sub.w	r8, r6, r7
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	f1b8 0f00 	cmp.w	r8, #0
 80013dc:	dde9      	ble.n	80013b2 <__sflush_r+0xae>
 80013de:	6a21      	ldr	r1, [r4, #32]
 80013e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80013e2:	4643      	mov	r3, r8
 80013e4:	463a      	mov	r2, r7
 80013e6:	4628      	mov	r0, r5
 80013e8:	47b0      	blx	r6
 80013ea:	2800      	cmp	r0, #0
 80013ec:	dc08      	bgt.n	8001400 <__sflush_r+0xfc>
 80013ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f6:	81a3      	strh	r3, [r4, #12]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001400:	4407      	add	r7, r0
 8001402:	eba8 0800 	sub.w	r8, r8, r0
 8001406:	e7e7      	b.n	80013d8 <__sflush_r+0xd4>
 8001408:	20400001 	.word	0x20400001

0800140c <_fflush_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	690b      	ldr	r3, [r1, #16]
 8001410:	4605      	mov	r5, r0
 8001412:	460c      	mov	r4, r1
 8001414:	b913      	cbnz	r3, 800141c <_fflush_r+0x10>
 8001416:	2500      	movs	r5, #0
 8001418:	4628      	mov	r0, r5
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	b118      	cbz	r0, 8001426 <_fflush_r+0x1a>
 800141e:	6a03      	ldr	r3, [r0, #32]
 8001420:	b90b      	cbnz	r3, 8001426 <_fflush_r+0x1a>
 8001422:	f7ff faa1 	bl	8000968 <__sinit>
 8001426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f3      	beq.n	8001416 <_fflush_r+0xa>
 800142e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001430:	07d0      	lsls	r0, r2, #31
 8001432:	d404      	bmi.n	800143e <_fflush_r+0x32>
 8001434:	0599      	lsls	r1, r3, #22
 8001436:	d402      	bmi.n	800143e <_fflush_r+0x32>
 8001438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800143a:	f7ff fb9a 	bl	8000b72 <__retarget_lock_acquire_recursive>
 800143e:	4628      	mov	r0, r5
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff ff5f 	bl	8001304 <__sflush_r>
 8001446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001448:	07da      	lsls	r2, r3, #31
 800144a:	4605      	mov	r5, r0
 800144c:	d4e4      	bmi.n	8001418 <_fflush_r+0xc>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	059b      	lsls	r3, r3, #22
 8001452:	d4e1      	bmi.n	8001418 <_fflush_r+0xc>
 8001454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001456:	f7ff fb8d 	bl	8000b74 <__retarget_lock_release_recursive>
 800145a:	e7dd      	b.n	8001418 <_fflush_r+0xc>

0800145c <__swbuf_r>:
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	460e      	mov	r6, r1
 8001460:	4614      	mov	r4, r2
 8001462:	4605      	mov	r5, r0
 8001464:	b118      	cbz	r0, 800146e <__swbuf_r+0x12>
 8001466:	6a03      	ldr	r3, [r0, #32]
 8001468:	b90b      	cbnz	r3, 800146e <__swbuf_r+0x12>
 800146a:	f7ff fa7d 	bl	8000968 <__sinit>
 800146e:	69a3      	ldr	r3, [r4, #24]
 8001470:	60a3      	str	r3, [r4, #8]
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	071a      	lsls	r2, r3, #28
 8001476:	d501      	bpl.n	800147c <__swbuf_r+0x20>
 8001478:	6923      	ldr	r3, [r4, #16]
 800147a:	b943      	cbnz	r3, 800148e <__swbuf_r+0x32>
 800147c:	4621      	mov	r1, r4
 800147e:	4628      	mov	r0, r5
 8001480:	f000 f82a 	bl	80014d8 <__swsetup_r>
 8001484:	b118      	cbz	r0, 800148e <__swbuf_r+0x32>
 8001486:	f04f 37ff 	mov.w	r7, #4294967295
 800148a:	4638      	mov	r0, r7
 800148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	6922      	ldr	r2, [r4, #16]
 8001492:	1a98      	subs	r0, r3, r2
 8001494:	6963      	ldr	r3, [r4, #20]
 8001496:	b2f6      	uxtb	r6, r6
 8001498:	4283      	cmp	r3, r0
 800149a:	4637      	mov	r7, r6
 800149c:	dc05      	bgt.n	80014aa <__swbuf_r+0x4e>
 800149e:	4621      	mov	r1, r4
 80014a0:	4628      	mov	r0, r5
 80014a2:	f7ff ffb3 	bl	800140c <_fflush_r>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d1ed      	bne.n	8001486 <__swbuf_r+0x2a>
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60a3      	str	r3, [r4, #8]
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	6022      	str	r2, [r4, #0]
 80014b6:	701e      	strb	r6, [r3, #0]
 80014b8:	6962      	ldr	r2, [r4, #20]
 80014ba:	1c43      	adds	r3, r0, #1
 80014bc:	429a      	cmp	r2, r3
 80014be:	d004      	beq.n	80014ca <__swbuf_r+0x6e>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	07db      	lsls	r3, r3, #31
 80014c4:	d5e1      	bpl.n	800148a <__swbuf_r+0x2e>
 80014c6:	2e0a      	cmp	r6, #10
 80014c8:	d1df      	bne.n	800148a <__swbuf_r+0x2e>
 80014ca:	4621      	mov	r1, r4
 80014cc:	4628      	mov	r0, r5
 80014ce:	f7ff ff9d 	bl	800140c <_fflush_r>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d0d9      	beq.n	800148a <__swbuf_r+0x2e>
 80014d6:	e7d6      	b.n	8001486 <__swbuf_r+0x2a>

080014d8 <__swsetup_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <__swsetup_r+0xa8>)
 80014dc:	4605      	mov	r5, r0
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	460c      	mov	r4, r1
 80014e2:	b118      	cbz	r0, 80014ec <__swsetup_r+0x14>
 80014e4:	6a03      	ldr	r3, [r0, #32]
 80014e6:	b90b      	cbnz	r3, 80014ec <__swsetup_r+0x14>
 80014e8:	f7ff fa3e 	bl	8000968 <__sinit>
 80014ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f0:	0719      	lsls	r1, r3, #28
 80014f2:	d422      	bmi.n	800153a <__swsetup_r+0x62>
 80014f4:	06da      	lsls	r2, r3, #27
 80014f6:	d407      	bmi.n	8001508 <__swsetup_r+0x30>
 80014f8:	2209      	movs	r2, #9
 80014fa:	602a      	str	r2, [r5, #0]
 80014fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001500:	81a3      	strh	r3, [r4, #12]
 8001502:	f04f 30ff 	mov.w	r0, #4294967295
 8001506:	e033      	b.n	8001570 <__swsetup_r+0x98>
 8001508:	0758      	lsls	r0, r3, #29
 800150a:	d512      	bpl.n	8001532 <__swsetup_r+0x5a>
 800150c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800150e:	b141      	cbz	r1, 8001522 <__swsetup_r+0x4a>
 8001510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001514:	4299      	cmp	r1, r3
 8001516:	d002      	beq.n	800151e <__swsetup_r+0x46>
 8001518:	4628      	mov	r0, r5
 800151a:	f7ff fb2d 	bl	8000b78 <_free_r>
 800151e:	2300      	movs	r3, #0
 8001520:	6363      	str	r3, [r4, #52]	@ 0x34
 8001522:	89a3      	ldrh	r3, [r4, #12]
 8001524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001528:	81a3      	strh	r3, [r4, #12]
 800152a:	2300      	movs	r3, #0
 800152c:	6063      	str	r3, [r4, #4]
 800152e:	6923      	ldr	r3, [r4, #16]
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	89a3      	ldrh	r3, [r4, #12]
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	81a3      	strh	r3, [r4, #12]
 800153a:	6923      	ldr	r3, [r4, #16]
 800153c:	b94b      	cbnz	r3, 8001552 <__swsetup_r+0x7a>
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001548:	d003      	beq.n	8001552 <__swsetup_r+0x7a>
 800154a:	4621      	mov	r1, r4
 800154c:	4628      	mov	r0, r5
 800154e:	f000 f84f 	bl	80015f0 <__smakebuf_r>
 8001552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001556:	f013 0201 	ands.w	r2, r3, #1
 800155a:	d00a      	beq.n	8001572 <__swsetup_r+0x9a>
 800155c:	2200      	movs	r2, #0
 800155e:	60a2      	str	r2, [r4, #8]
 8001560:	6962      	ldr	r2, [r4, #20]
 8001562:	4252      	negs	r2, r2
 8001564:	61a2      	str	r2, [r4, #24]
 8001566:	6922      	ldr	r2, [r4, #16]
 8001568:	b942      	cbnz	r2, 800157c <__swsetup_r+0xa4>
 800156a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800156e:	d1c5      	bne.n	80014fc <__swsetup_r+0x24>
 8001570:	bd38      	pop	{r3, r4, r5, pc}
 8001572:	0799      	lsls	r1, r3, #30
 8001574:	bf58      	it	pl
 8001576:	6962      	ldrpl	r2, [r4, #20]
 8001578:	60a2      	str	r2, [r4, #8]
 800157a:	e7f4      	b.n	8001566 <__swsetup_r+0x8e>
 800157c:	2000      	movs	r0, #0
 800157e:	e7f7      	b.n	8001570 <__swsetup_r+0x98>
 8001580:	20000010 	.word	0x20000010

08001584 <_sbrk_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4d06      	ldr	r5, [pc, #24]	@ (80015a0 <_sbrk_r+0x1c>)
 8001588:	2300      	movs	r3, #0
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	f7ff f8d8 	bl	8000744 <_sbrk>
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	d102      	bne.n	800159e <_sbrk_r+0x1a>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	b103      	cbz	r3, 800159e <_sbrk_r+0x1a>
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	200001c0 	.word	0x200001c0

080015a4 <__swhatbuf_r>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	460c      	mov	r4, r1
 80015a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015ac:	2900      	cmp	r1, #0
 80015ae:	b096      	sub	sp, #88	@ 0x58
 80015b0:	4615      	mov	r5, r2
 80015b2:	461e      	mov	r6, r3
 80015b4:	da0d      	bge.n	80015d2 <__swhatbuf_r+0x2e>
 80015b6:	89a3      	ldrh	r3, [r4, #12]
 80015b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2340      	movne	r3, #64	@ 0x40
 80015c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015c8:	2000      	movs	r0, #0
 80015ca:	6031      	str	r1, [r6, #0]
 80015cc:	602b      	str	r3, [r5, #0]
 80015ce:	b016      	add	sp, #88	@ 0x58
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
 80015d2:	466a      	mov	r2, sp
 80015d4:	f000 f848 	bl	8001668 <_fstat_r>
 80015d8:	2800      	cmp	r0, #0
 80015da:	dbec      	blt.n	80015b6 <__swhatbuf_r+0x12>
 80015dc:	9901      	ldr	r1, [sp, #4]
 80015de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015e6:	4259      	negs	r1, r3
 80015e8:	4159      	adcs	r1, r3
 80015ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ee:	e7eb      	b.n	80015c8 <__swhatbuf_r+0x24>

080015f0 <__smakebuf_r>:
 80015f0:	898b      	ldrh	r3, [r1, #12]
 80015f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015f4:	079d      	lsls	r5, r3, #30
 80015f6:	4606      	mov	r6, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	d507      	bpl.n	800160c <__smakebuf_r+0x1c>
 80015fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001600:	6023      	str	r3, [r4, #0]
 8001602:	6123      	str	r3, [r4, #16]
 8001604:	2301      	movs	r3, #1
 8001606:	6163      	str	r3, [r4, #20]
 8001608:	b003      	add	sp, #12
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160c:	ab01      	add	r3, sp, #4
 800160e:	466a      	mov	r2, sp
 8001610:	f7ff ffc8 	bl	80015a4 <__swhatbuf_r>
 8001614:	9f00      	ldr	r7, [sp, #0]
 8001616:	4605      	mov	r5, r0
 8001618:	4639      	mov	r1, r7
 800161a:	4630      	mov	r0, r6
 800161c:	f7ff fb18 	bl	8000c50 <_malloc_r>
 8001620:	b948      	cbnz	r0, 8001636 <__smakebuf_r+0x46>
 8001622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001626:	059a      	lsls	r2, r3, #22
 8001628:	d4ee      	bmi.n	8001608 <__smakebuf_r+0x18>
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	81a3      	strh	r3, [r4, #12]
 8001634:	e7e2      	b.n	80015fc <__smakebuf_r+0xc>
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	6020      	str	r0, [r4, #0]
 800163a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800163e:	81a3      	strh	r3, [r4, #12]
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001646:	b15b      	cbz	r3, 8001660 <__smakebuf_r+0x70>
 8001648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800164c:	4630      	mov	r0, r6
 800164e:	f000 f81d 	bl	800168c <_isatty_r>
 8001652:	b128      	cbz	r0, 8001660 <__smakebuf_r+0x70>
 8001654:	89a3      	ldrh	r3, [r4, #12]
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	89a3      	ldrh	r3, [r4, #12]
 8001662:	431d      	orrs	r5, r3
 8001664:	81a5      	strh	r5, [r4, #12]
 8001666:	e7cf      	b.n	8001608 <__smakebuf_r+0x18>

08001668 <_fstat_r>:
 8001668:	b538      	push	{r3, r4, r5, lr}
 800166a:	4d07      	ldr	r5, [pc, #28]	@ (8001688 <_fstat_r+0x20>)
 800166c:	2300      	movs	r3, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	602b      	str	r3, [r5, #0]
 8001676:	f7ff f83d 	bl	80006f4 <_fstat>
 800167a:	1c43      	adds	r3, r0, #1
 800167c:	d102      	bne.n	8001684 <_fstat_r+0x1c>
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	b103      	cbz	r3, 8001684 <_fstat_r+0x1c>
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	bd38      	pop	{r3, r4, r5, pc}
 8001686:	bf00      	nop
 8001688:	200001c0 	.word	0x200001c0

0800168c <_isatty_r>:
 800168c:	b538      	push	{r3, r4, r5, lr}
 800168e:	4d06      	ldr	r5, [pc, #24]	@ (80016a8 <_isatty_r+0x1c>)
 8001690:	2300      	movs	r3, #0
 8001692:	4604      	mov	r4, r0
 8001694:	4608      	mov	r0, r1
 8001696:	602b      	str	r3, [r5, #0]
 8001698:	f7ff f83c 	bl	8000714 <_isatty>
 800169c:	1c43      	adds	r3, r0, #1
 800169e:	d102      	bne.n	80016a6 <_isatty_r+0x1a>
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	b103      	cbz	r3, 80016a6 <_isatty_r+0x1a>
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
 80016a8:	200001c0 	.word	0x200001c0

080016ac <_init>:
 80016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ae:	bf00      	nop
 80016b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b2:	bc08      	pop	{r3}
 80016b4:	469e      	mov	lr, r3
 80016b6:	4770      	bx	lr

080016b8 <_fini>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	bf00      	nop
 80016bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016be:	bc08      	pop	{r3}
 80016c0:	469e      	mov	lr, r3
 80016c2:	4770      	bx	lr
