
primeiro_estagio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000944  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000acc  08000acc  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000acc  08000acc  00002010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000acc  08000acc  00002010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000acc  08000acc  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000acc  08000acc  00001acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ad0  08000ad0  00001ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000ad4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002010  2**0
                  CONTENTS
 10 .bss          00000020  20000010  20000010  00002010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000035bf  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ab7  00000000  00000000  000055ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  000060b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002f7  00000000  00000000  000064d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eabb  00000000  00000000  000067c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000040b4  00000000  00000000  00025282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc4b1  00000000  00000000  00029336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e57e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f1c  00000000  00000000  000e582c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  000e6748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ab4 	.word	0x08000ab4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000ab4 	.word	0x08000ab4

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	@ (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <Utility_Init>:
//Declarações de funções úteis

//Funções de configuração do sistema de clock do STM32
//Inicialização de funções da biblioteca
void Utility_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	Configure_Clock();	//inicializa o sistema de clock
 8000250:	f000 f804 	bl	800025c <Configure_Clock>
	TIM2_Setup();		//configura o Timer2 como base de tempo de 1us
 8000254:	f000 f86c 	bl	8000330 <TIM2_Setup>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}

0800025c <Configure_Clock>:
//HCLK = 168 MHz
//APB1 = 42 MHz
//APB2 = 84 MHz
//USB, RNG, SDIO = 48 MHz
void Configure_Clock(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	#define PLL_N	168
	#define PLL_P	2
	#define PLL_Q	7

	//Configurações da Flash e do regulador de tensão para permitir operação em alta velocidade
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;	//habilita prefetch, caches e a latência da flash
 8000260:	4b2e      	ldr	r3, [pc, #184]	@ (800031c <Configure_Clock+0xc0>)
 8000262:	f240 7205 	movw	r2, #1797	@ 0x705
 8000266:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;	//habilita o clock da interface de energia
 8000268:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <Configure_Clock+0xc4>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026c:	4a2c      	ldr	r2, [pc, #176]	@ (8000320 <Configure_Clock+0xc4>)
 800026e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000272:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;				//regulador de tensão no modo 2
 8000274:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <Configure_Clock+0xc8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2a      	ldr	r2, [pc, #168]	@ (8000324 <Configure_Clock+0xc8>)
 800027a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800027e:	6013      	str	r3, [r2, #0]

	//Configuração do modo de agrupamento de prioridades das interrupções
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f7ff ffa1 	bl	80001c8 <__NVIC_SetPriorityGrouping>

	//Reseta os registradores do módulo RCC para o estado inicial
	RCC->CIR = 0;				//desabilita todas as interrupções de RCC
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <Configure_Clock+0xc4>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_HSION;	//liga o oscilador HSI
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <Configure_Clock+0xc4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a23      	ldr	r2, [pc, #140]	@ (8000320 <Configure_Clock+0xc4>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
	RCC->CFGR = 0;				//reseta o registrador CFGR
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <Configure_Clock+0xc4>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	//Desliga HSE, CSS e o PLL e o bypass de HSE
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON | RCC_CR_HSEBYP);
 800029e:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <Configure_Clock+0xc4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000320 <Configure_Clock+0xc4>)
 80002a4:	f023 7386 	bic.w	r3, r3, #17563648	@ 0x10c0000
 80002a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80002ac:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x24003010;	//reseta o registrador PLLCFGR
 80002ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <Configure_Clock+0xc4>)
 80002b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000328 <Configure_Clock+0xcc>)
 80002b2:	605a      	str	r2, [r3, #4]

	//Configura a fonte de clock (HSE), os parâmetros do PLL e prescalers dos barramentos AHB, APB
	RCC->CR |= RCC_CR_HSEON;				//habilita HSE
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <Configure_Clock+0xc4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a19      	ldr	r2, [pc, #100]	@ (8000320 <Configure_Clock+0xc4>)
 80002ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002be:	6013      	str	r3, [r2, #0]
	while(!((RCC->CR) & RCC_CR_HSERDY));	//espera HSE ficar pronto
 80002c0:	bf00      	nop
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <Configure_Clock+0xc4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <Configure_Clock+0x66>
    RCC->CFGR |= 0x9400;	//HCLK = SYSCLK/1, PCLK2 = HCLK/2, PCLK1 = HCLK/4
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <Configure_Clock+0xc4>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <Configure_Clock+0xc4>)
 80002d4:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 80002d8:	6093      	str	r3, [r2, #8]

    //Configura a fonte de clock e os parâmetros do PLL principal
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (0x400000) | (PLL_Q << 24);
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <Configure_Clock+0xc4>)
 80002dc:	4a13      	ldr	r2, [pc, #76]	@ (800032c <Configure_Clock+0xd0>)
 80002de:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON;			//habilita o PLL
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <Configure_Clock+0xc4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <Configure_Clock+0xc4>)
 80002e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002ea:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));	//espera o PLL ficar pronto verificando a flag PLLRDY
 80002ec:	bf00      	nop
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <Configure_Clock+0xc4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <Configure_Clock+0x92>

    RCC->CFGR |= 0x2;					//seleciona o PLL como fonte de SYSCLK
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <Configure_Clock+0xc4>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <Configure_Clock+0xc4>)
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & 0xC) != 0x8);	//espera o PLL ser a fonte de SYSCLK
 8000306:	bf00      	nop
 8000308:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <Configure_Clock+0xc4>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	f003 030c 	and.w	r3, r3, #12
 8000310:	2b08      	cmp	r3, #8
 8000312:	d1f9      	bne.n	8000308 <Configure_Clock+0xac>
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40023c00 	.word	0x40023c00
 8000320:	40023800 	.word	0x40023800
 8000324:	40007000 	.word	0x40007000
 8000328:	24003010 	.word	0x24003010
 800032c:	07402a04 	.word	0x07402a04

08000330 <TIM2_Setup>:


//Funções de timers e temporização
//Configura o timer 2 como base de tempo de 1us
void TIM2_Setup(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	//O modo padrão do contador é com contagem crescente
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	//liga o clock do Timer2
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <TIM2_Setup+0x3c>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000338:	4a0c      	ldr	r2, [pc, #48]	@ (800036c <TIM2_Setup+0x3c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 83;						//prescaler para incrementos a cada 1uS
 8000340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000344:	2253      	movs	r2, #83	@ 0x53
 8000346:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->EGR = TIM_EGR_UG;				//update event para escrever o valor do prescaler
 8000348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034c:	2201      	movs	r2, #1
 800034e:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;			//habilita o timer
 8000350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40023800 	.word	0x40023800

08000370 <Delay_ms>:
	while(TIM2->CNT < delay);	//aguarda o tempo passar
}

//Criação de atraso em ms
void Delay_ms(uint32_t delay)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t max = 1000*delay;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800037e:	fb02 f303 	mul.w	r3, r2, r3
 8000382:	60fb      	str	r3, [r7, #12]
	TIM2->CNT = 0;				//inicializa o contador com 0
 8000384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < max);		//aguarda o tempo passar
 800038c:	bf00      	nop
 800038e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	429a      	cmp	r2, r3
 8000398:	d8f9      	bhi.n	800038e <Delay_ms+0x1e>
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <GPIO_Clock_Enable>:


//Funções de manipulação de GPIO
//Habilita o clock de um GPIO
void GPIO_Clock_Enable(GPIO_TypeDef* GPIOx)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1 << ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)));
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <GPIO_Clock_Enable+0x30>)
 80003b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80003ba:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80003be:	0a9b      	lsrs	r3, r3, #10
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	4904      	ldr	r1, [pc, #16]	@ (80003d8 <GPIO_Clock_Enable+0x30>)
 80003c8:	4313      	orrs	r3, r2
 80003ca:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40023800 	.word	0x40023800

080003dc <GPIO_Pin_Mode>:

//Configura o modo de operação de um pino de um GPIO
void GPIO_Pin_Mode(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
 80003e8:	4613      	mov	r3, r2
 80003ea:	70bb      	strb	r3, [r7, #2]
	GPIOx->MODER &= ~(0b11 << 2*pin);	//reseta os 2 bits do modo de operação
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	78fa      	ldrb	r2, [r7, #3]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	2103      	movs	r1, #3
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	401a      	ands	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << 2*pin);	//configura o modo selecionado
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	78b9      	ldrb	r1, [r7, #2]
 8000408:	78fa      	ldrb	r2, [r7, #3]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <GPIO_Toggle_Pin>:
	//GPIOx->BSRR |= (1 << (pin + 16 * (1 - level)));	//alternativa usando o registrador BSRR
}

//Inverte o nível lógico em um pino de um GPIO
static inline void GPIO_Toggle_Pin(GPIO_TypeDef* GPIOx, uint8_t pin)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	460b      	mov	r3, r1
 800042c:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR ^= (1 << pin);	//inverte o nível lógico no pino
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	78fa      	ldrb	r2, [r7, #3]
 8000434:	2101      	movs	r1, #1
 8000436:	fa01 f202 	lsl.w	r2, r1, r2
 800043a:	405a      	eors	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	615a      	str	r2, [r3, #20]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <GPIO_Resistor_Enable>:
	GPIOx->ODR = value;
}

//Habilita os resistores de pull-up ou pull-down
void GPIO_Resistor_Enable(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]
 8000458:	4613      	mov	r3, r2
 800045a:	70bb      	strb	r3, [r7, #2]
	GPIOx->PUPDR &= ~(0b11 << 2*pin);	//desabilita qualquer resistor
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	2103      	movs	r1, #3
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	43d2      	mvns	r2, r2
 800046c:	401a      	ands	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (mode << 2*pin);	//habilita o resistor selecionado
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	78b9      	ldrb	r1, [r7, #2]
 8000478:	78fa      	ldrb	r2, [r7, #3]
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	431a      	orrs	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	60da      	str	r2, [r3, #12]
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
	...

08000494 <EXTI_Config_Helper>:

//Funções de manipulação das interrupções externas
//Função de configuração
//#define EXTI_Config(...)	EXTI_Config_Helper(__VA_ARGS__)
void EXTI_Config_Helper(uint8_t exti_line, GPIO_TypeDef* GPIOx, uint8_t trigger1, uint8_t trigger2)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6039      	str	r1, [r7, #0]
 800049c:	4611      	mov	r1, r2
 800049e:	461a      	mov	r2, r3
 80004a0:	4603      	mov	r3, r0
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	460b      	mov	r3, r1
 80004a6:	71bb      	strb	r3, [r7, #6]
 80004a8:	4613      	mov	r3, r2
 80004aa:	717b      	strb	r3, [r7, #5]
	uint8_t index = exti_line / 4;          //calcula o índice de EXTICR[]
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	73fb      	strb	r3, [r7, #15]
	uint8_t shift = (exti_line % 4) * 4;    //calcula o campo de bits dentro do EXTICR[index]
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	73bb      	strb	r3, [r7, #14]
	uint8_t port = ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)); //calcula o número da porta GPIO
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80004c4:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80004c8:	0a9b      	lsrs	r3, r3, #10
 80004ca:	737b      	strb	r3, [r7, #13]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		//habilita o clock de SYSCFG
 80004cc:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <EXTI_Config_Helper+0xc4>)
 80004ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004d0:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <EXTI_Config_Helper+0xc4>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d6:	6453      	str	r3, [r2, #68]	@ 0x44
	SYSCFG->EXTICR[index] |= (port << shift);	//seleciona a porta/pino como gatilho de EXTI
 80004d8:	4a20      	ldr	r2, [pc, #128]	@ (800055c <EXTI_Config_Helper+0xc8>)
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	3302      	adds	r3, #2
 80004de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e2:	7b79      	ldrb	r1, [r7, #13]
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	491b      	ldr	r1, [pc, #108]	@ (800055c <EXTI_Config_Helper+0xc8>)
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	4302      	orrs	r2, r0
 80004f2:	3302      	adds	r3, #2
 80004f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if((trigger1 == FALLING_EDGE) || (trigger2 == FALLING_EDGE))
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d002      	beq.n	8000504 <EXTI_Config_Helper+0x70>
 80004fe:	797b      	ldrb	r3, [r7, #5]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d109      	bne.n	8000518 <EXTI_Config_Helper+0x84>
		EXTI->FTSR |= 1 << exti_line;	//seleciona borda de descida
 8000504:	4b16      	ldr	r3, [pc, #88]	@ (8000560 <EXTI_Config_Helper+0xcc>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	79fa      	ldrb	r2, [r7, #7]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a13      	ldr	r2, [pc, #76]	@ (8000560 <EXTI_Config_Helper+0xcc>)
 8000514:	430b      	orrs	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]
	if((trigger1 == RISING_EDGE) || (trigger2 == RISING_EDGE))
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b02      	cmp	r3, #2
 800051c:	d002      	beq.n	8000524 <EXTI_Config_Helper+0x90>
 800051e:	797b      	ldrb	r3, [r7, #5]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d109      	bne.n	8000538 <EXTI_Config_Helper+0xa4>
		EXTI->RTSR |= 1 << exti_line;	//seleciona borda de subida
 8000524:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <EXTI_Config_Helper+0xcc>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	79fa      	ldrb	r2, [r7, #7]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <EXTI_Config_Helper+0xcc>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= 1 << exti_line;	//habilita a interrupção EXTI
 8000538:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <EXTI_Config_Helper+0xcc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	79fa      	ldrb	r2, [r7, #7]
 800053e:	2101      	movs	r1, #1
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <EXTI_Config_Helper+0xcc>)
 8000548:	430b      	orrs	r3, r1
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800
 800055c:	40013800 	.word	0x40013800
 8000560:	40013c00 	.word	0x40013c00

08000564 <EXTI_Config3>:

//Função de configuração com 3 argumentos
void EXTI_Config3(uint8_t exti_line, GPIO_TypeDef* GPIOx, uint8_t trigger1)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	6039      	str	r1, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]
    EXTI_Config_Helper(exti_line, GPIOx, trigger1, 0);
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	79f8      	ldrb	r0, [r7, #7]
 8000578:	2300      	movs	r3, #0
 800057a:	6839      	ldr	r1, [r7, #0]
 800057c:	f7ff ff8a 	bl	8000494 <EXTI_Config_Helper>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <EXTI_Clear_Pending>:
    EXTI_Config_Helper(exti_line, GPIOx, trigger1, trigger2);
}

//Função de limpeza de flag de pendência
static inline void EXTI_Clear_Pending(uint8_t exti_line)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= 1 << exti_line;	//limpa o flag de pendência em EXTI
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <EXTI_Clear_Pending+0x2c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	79fa      	ldrb	r2, [r7, #7]
 8000598:	2101      	movs	r1, #1
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <EXTI_Clear_Pending+0x2c>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6153      	str	r3, [r2, #20]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40013c00 	.word	0x40013c00

080005b8 <__io_putchar>:
	GPIOA->AFR[1] |= (0b0111 << 8) | (0b0111 << 4);	//função alternativa 7 (USART1)
}

//Redefinição da função de envio de dados pela USART1
int __io_putchar(int ch)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	USART1->DR = ch;						//transmite o dado
 80005c0:	4a08      	ldr	r2, [pc, #32]	@ (80005e4 <__io_putchar+0x2c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE));	//espera pelo fim da transmissão
 80005c6:	bf00      	nop
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <__io_putchar+0x2c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f9      	beq.n	80005c8 <__io_putchar+0x10>
	return ch;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40011000 	.word	0x40011000

080005e8 <__io_getchar>:

//Redefinição da função de recebimento de dados pela USART1
int __io_getchar(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
   return (uint16_t)(USART1->DR);	//lê o dado recebido
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <__io_getchar+0x14>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40011000 	.word	0x40011000

08000600 <USART1_IRQHandler>:

//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32f407vetx.s
void USART1_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());	//lê o dado e reenvia pela USART1
 8000604:	f7ff fff0 	bl	80005e8 <__io_getchar>
 8000608:	4603      	mov	r3, r0
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffd4 	bl	80005b8 <__io_putchar>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <EXTI0_IRQHandler>:
// OSPEEDR -
// PUPDR - Configura se os registores pull up e down internos da placa vão estar habilitados ou não.

uint8_t tempo = 2;

void EXTI0_IRQHandler(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	if (tempo == 2){
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <EXTI0_IRQHandler+0x24>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d103      	bne.n	8000628 <EXTI0_IRQHandler+0x14>
		tempo = 5;
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <EXTI0_IRQHandler+0x24>)
 8000622:	2205      	movs	r2, #5
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e002      	b.n	800062e <EXTI0_IRQHandler+0x1a>
	} else{
		tempo = 2;
 8000628:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <EXTI0_IRQHandler+0x24>)
 800062a:	2202      	movs	r2, #2
 800062c:	701a      	strb	r2, [r3, #0]
	}
	EXTI_Clear_Pending(EXTI0);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ffaa 	bl	8000588 <EXTI_Clear_Pending>

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000

0800063c <main>:

int main(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000640:	f000 f8c8 	bl	80007d4 <HAL_Init>
	Utility_Init();
 8000644:	f7ff fe02 	bl	800024c <Utility_Init>

	GPIO_Clock_Enable(GPIOA);
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <main+0x68>)
 800064a:	f7ff fead 	bl	80003a8 <GPIO_Clock_Enable>
	GPIO_Pin_Mode(GPIOA, PIN_0, INPUT);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	4814      	ldr	r0, [pc, #80]	@ (80006a4 <main+0x68>)
 8000654:	f7ff fec2 	bl	80003dc <GPIO_Pin_Mode>
	GPIO_Resistor_Enable(GPIOA, PIN_0, PULL_DOWN);
 8000658:	2202      	movs	r2, #2
 800065a:	2100      	movs	r1, #0
 800065c:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <main+0x68>)
 800065e:	f7ff fef5 	bl	800044c <GPIO_Resistor_Enable>
	GPIO_Pin_Mode(GPIOA, PIN_6, OUTPUT);
 8000662:	2201      	movs	r2, #1
 8000664:	2106      	movs	r1, #6
 8000666:	480f      	ldr	r0, [pc, #60]	@ (80006a4 <main+0x68>)
 8000668:	f7ff feb8 	bl	80003dc <GPIO_Pin_Mode>
//	uint32_t pulsoMin = 500;
//	uint32_t pulsoMax = 2500;
//	uint32_t pulso = 500;


	EXTI_Config(EXTI0, GPIOA, RISING_EDGE);
 800066c:	2202      	movs	r2, #2
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <main+0x68>)
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff77 	bl	8000564 <EXTI_Config3>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000676:	2006      	movs	r0, #6
 8000678:	f7ff fdca 	bl	8000210 <__NVIC_EnableIRQ>
//				Delay_ms(10);
//
//
//	}
		// SEGUNDO ESTAGIO
		GPIO_Toggle_Pin(GPIOA, PIN_6);
 800067c:	2106      	movs	r1, #6
 800067e:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <main+0x68>)
 8000680:	f7ff fecf 	bl	8000422 <GPIO_Toggle_Pin>
		Delay_ms(250);
 8000684:	20fa      	movs	r0, #250	@ 0xfa
 8000686:	f7ff fe73 	bl	8000370 <Delay_ms>
		if (tempo == 2){
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <main+0x6c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d103      	bne.n	800069a <main+0x5e>
			Delay_ms(250);
 8000692:	20fa      	movs	r0, #250	@ 0xfa
 8000694:	f7ff fe6c 	bl	8000370 <Delay_ms>
 8000698:	e7f0      	b.n	800067c <main+0x40>
		} else{
			Delay_ms(100);
 800069a:	2064      	movs	r0, #100	@ 0x64
 800069c:	f7ff fe68 	bl	8000370 <Delay_ms>
		GPIO_Toggle_Pin(GPIOA, PIN_6);
 80006a0:	e7ec      	b.n	800067c <main+0x40>
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000
 80006a8:	20000000 	.word	0x20000000

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ba:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <HAL_MspInit+0x4c>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <HAL_MspInit+0x4c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <MemManage_Handler+0x4>

08000714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <UsageFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000752:	f000 f891 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000784:	f7ff ffea 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	@ (80007c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	@ (80007cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f000 f95d 	bl	8000a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff ff43 	bl	800063c <main>
  bx  lr    
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007c4:	08000ad4 	.word	0x08000ad4
  ldr r2, =_sbss
 80007c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007cc:	20000030 	.word	0x20000030

080007d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <HAL_Init+0x40>)
 80007de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <HAL_Init+0x40>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_Init+0x40>)
 80007f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f901 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff50 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023c00 	.word	0x40023c00

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f90b 	bl	8000a52 <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f8e1 	bl	8000a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000004 	.word	0x20000004
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	@ (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000000c 	.word	0x2000000c
 800089c:	2000002c 	.word	0x2000002c

080008a0 <__NVIC_SetPriorityGrouping>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	@ (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	@ (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	@ 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff8e 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff47 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff5c 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff8e 	bl	8000958 <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5d 	bl	8000904 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffb0 	bl	80009c0 <SysTick_Config>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <__libc_init_array>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8000aa4 <__libc_init_array+0x38>)
 8000a70:	4c0d      	ldr	r4, [pc, #52]	@ (8000aa8 <__libc_init_array+0x3c>)
 8000a72:	1b64      	subs	r4, r4, r5
 8000a74:	10a4      	asrs	r4, r4, #2
 8000a76:	2600      	movs	r6, #0
 8000a78:	42a6      	cmp	r6, r4
 8000a7a:	d109      	bne.n	8000a90 <__libc_init_array+0x24>
 8000a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8000aac <__libc_init_array+0x40>)
 8000a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab0 <__libc_init_array+0x44>)
 8000a80:	f000 f818 	bl	8000ab4 <_init>
 8000a84:	1b64      	subs	r4, r4, r5
 8000a86:	10a4      	asrs	r4, r4, #2
 8000a88:	2600      	movs	r6, #0
 8000a8a:	42a6      	cmp	r6, r4
 8000a8c:	d105      	bne.n	8000a9a <__libc_init_array+0x2e>
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a94:	4798      	blx	r3
 8000a96:	3601      	adds	r6, #1
 8000a98:	e7ee      	b.n	8000a78 <__libc_init_array+0xc>
 8000a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9e:	4798      	blx	r3
 8000aa0:	3601      	adds	r6, #1
 8000aa2:	e7f2      	b.n	8000a8a <__libc_init_array+0x1e>
 8000aa4:	08000acc 	.word	0x08000acc
 8000aa8:	08000acc 	.word	0x08000acc
 8000aac:	08000acc 	.word	0x08000acc
 8000ab0:	08000ad0 	.word	0x08000ad0

08000ab4 <_init>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr

08000ac0 <_fini>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	bf00      	nop
 8000ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac6:	bc08      	pop	{r3}
 8000ac8:	469e      	mov	lr, r3
 8000aca:	4770      	bx	lr
