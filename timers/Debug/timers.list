
timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000474  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005fc  08000604  00001604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005fc  080005fc  00001604  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005fc  080005fc  00001604  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005fc  08000604  00001604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005fc  080005fc  000015fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000600  08000600  00001600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001604  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001802  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000400  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00003238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013d  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e548  00000000  00000000  0000352d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000206d  00000000  00000000  00021a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb58d  00000000  00000000  00023ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000df06f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005dc  00000000  00000000  000df0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  000df690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005e4 	.word	0x080005e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080005e4 	.word	0x080005e4

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <Utility_Init>:
//Declarações de funções úteis

//Funções de configuração do sistema de clock do STM32
//Inicialização de funções da biblioteca
void Utility_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	Configure_Clock();	//inicializa o sistema de clock
 8000214:	f000 f804 	bl	8000220 <Configure_Clock>
	TIM2_Setup();		//configura o Timer2 como base de tempo de 1us
 8000218:	f000 f86c 	bl	80002f4 <TIM2_Setup>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}

08000220 <Configure_Clock>:
//HCLK = 168 MHz
//APB1 = 42 MHz
//APB2 = 84 MHz
//USB, RNG, SDIO = 48 MHz
void Configure_Clock(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	#define PLL_N	168
	#define PLL_P	2
	#define PLL_Q	7

	//Configurações da Flash e do regulador de tensão para permitir operação em alta velocidade
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;	//habilita prefetch, caches e a latência da flash
 8000224:	4b2e      	ldr	r3, [pc, #184]	@ (80002e0 <Configure_Clock+0xc0>)
 8000226:	f240 7205 	movw	r2, #1797	@ 0x705
 800022a:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;	//habilita o clock da interface de energia
 800022c:	4b2d      	ldr	r3, [pc, #180]	@ (80002e4 <Configure_Clock+0xc4>)
 800022e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000230:	4a2c      	ldr	r2, [pc, #176]	@ (80002e4 <Configure_Clock+0xc4>)
 8000232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000236:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;				//regulador de tensão no modo 2
 8000238:	4b2b      	ldr	r3, [pc, #172]	@ (80002e8 <Configure_Clock+0xc8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a2a      	ldr	r2, [pc, #168]	@ (80002e8 <Configure_Clock+0xc8>)
 800023e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000242:	6013      	str	r3, [r2, #0]

	//Configuração do modo de agrupamento de prioridades das interrupções
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000244:	2003      	movs	r0, #3
 8000246:	f7ff ffbf 	bl	80001c8 <__NVIC_SetPriorityGrouping>

	//Reseta os registradores do módulo RCC para o estado inicial
	RCC->CIR = 0;				//desabilita todas as interrupções de RCC
 800024a:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <Configure_Clock+0xc4>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_HSION;	//liga o oscilador HSI
 8000250:	4b24      	ldr	r3, [pc, #144]	@ (80002e4 <Configure_Clock+0xc4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a23      	ldr	r2, [pc, #140]	@ (80002e4 <Configure_Clock+0xc4>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
	RCC->CFGR = 0;				//reseta o registrador CFGR
 800025c:	4b21      	ldr	r3, [pc, #132]	@ (80002e4 <Configure_Clock+0xc4>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
	//Desliga HSE, CSS e o PLL e o bypass de HSE
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON | RCC_CR_HSEBYP);
 8000262:	4b20      	ldr	r3, [pc, #128]	@ (80002e4 <Configure_Clock+0xc4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a1f      	ldr	r2, [pc, #124]	@ (80002e4 <Configure_Clock+0xc4>)
 8000268:	f023 7386 	bic.w	r3, r3, #17563648	@ 0x10c0000
 800026c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000270:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x24003010;	//reseta o registrador PLLCFGR
 8000272:	4b1c      	ldr	r3, [pc, #112]	@ (80002e4 <Configure_Clock+0xc4>)
 8000274:	4a1d      	ldr	r2, [pc, #116]	@ (80002ec <Configure_Clock+0xcc>)
 8000276:	605a      	str	r2, [r3, #4]

	//Configura a fonte de clock (HSE), os parâmetros do PLL e prescalers dos barramentos AHB, APB
	RCC->CR |= RCC_CR_HSEON;				//habilita HSE
 8000278:	4b1a      	ldr	r3, [pc, #104]	@ (80002e4 <Configure_Clock+0xc4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a19      	ldr	r2, [pc, #100]	@ (80002e4 <Configure_Clock+0xc4>)
 800027e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000282:	6013      	str	r3, [r2, #0]
	while(!((RCC->CR) & RCC_CR_HSERDY));	//espera HSE ficar pronto
 8000284:	bf00      	nop
 8000286:	4b17      	ldr	r3, [pc, #92]	@ (80002e4 <Configure_Clock+0xc4>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f9      	beq.n	8000286 <Configure_Clock+0x66>
    RCC->CFGR |= 0x9400;	//HCLK = SYSCLK/1, PCLK2 = HCLK/2, PCLK1 = HCLK/4
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <Configure_Clock+0xc4>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <Configure_Clock+0xc4>)
 8000298:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 800029c:	6093      	str	r3, [r2, #8]

    //Configura a fonte de clock e os parâmetros do PLL principal
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (0x400000) | (PLL_Q << 24);
 800029e:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <Configure_Clock+0xc4>)
 80002a0:	4a13      	ldr	r2, [pc, #76]	@ (80002f0 <Configure_Clock+0xd0>)
 80002a2:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON;			//habilita o PLL
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <Configure_Clock+0xc4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <Configure_Clock+0xc4>)
 80002aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002ae:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));	//espera o PLL ficar pronto verificando a flag PLLRDY
 80002b0:	bf00      	nop
 80002b2:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <Configure_Clock+0xc4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <Configure_Clock+0x92>

    RCC->CFGR |= 0x2;					//seleciona o PLL como fonte de SYSCLK
 80002be:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <Configure_Clock+0xc4>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <Configure_Clock+0xc4>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & 0xC) != 0x8);	//espera o PLL ser a fonte de SYSCLK
 80002ca:	bf00      	nop
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <Configure_Clock+0xc4>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	f003 030c 	and.w	r3, r3, #12
 80002d4:	2b08      	cmp	r3, #8
 80002d6:	d1f9      	bne.n	80002cc <Configure_Clock+0xac>
}
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40023c00 	.word	0x40023c00
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40007000 	.word	0x40007000
 80002ec:	24003010 	.word	0x24003010
 80002f0:	07402a04 	.word	0x07402a04

080002f4 <TIM2_Setup>:


//Funções de timers e temporização
//Configura o timer 2 como base de tempo de 1us
void TIM2_Setup(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	//O modo padrão do contador é com contagem crescente
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	//liga o clock do Timer2
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <TIM2_Setup+0x3c>)
 80002fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000330 <TIM2_Setup+0x3c>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 83;						//prescaler para incrementos a cada 1uS
 8000304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000308:	2253      	movs	r2, #83	@ 0x53
 800030a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->EGR = TIM_EGR_UG;				//update event para escrever o valor do prescaler
 800030c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000310:	2201      	movs	r2, #1
 8000312:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;			//habilita o timer
 8000314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800

08000334 <Delay_ms>:
	while(TIM2->CNT < delay);	//aguarda o tempo passar
}

//Criação de atraso em ms
void Delay_ms(uint32_t delay)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	uint32_t max = 1000*delay;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000342:	fb02 f303 	mul.w	r3, r2, r3
 8000346:	60fb      	str	r3, [r7, #12]
	TIM2->CNT = 0;				//inicializa o contador com 0
 8000348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < max);		//aguarda o tempo passar
 8000350:	bf00      	nop
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	429a      	cmp	r2, r3
 800035c:	d8f9      	bhi.n	8000352 <Delay_ms+0x1e>
}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <GPIO_Clock_Enable>:


//Funções de manipulação de GPIO
//Habilita o clock de um GPIO
void GPIO_Clock_Enable(GPIO_TypeDef* GPIOx)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1 << ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)));
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <GPIO_Clock_Enable+0x30>)
 8000376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 800037e:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8000382:	0a9b      	lsrs	r3, r3, #10
 8000384:	2101      	movs	r1, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	4904      	ldr	r1, [pc, #16]	@ (800039c <GPIO_Clock_Enable+0x30>)
 800038c:	4313      	orrs	r3, r2
 800038e:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40023800 	.word	0x40023800

080003a0 <GPIO_Pin_Mode>:

//Configura o modo de operação de um pino de um GPIO
void GPIO_Pin_Mode(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]
 80003ac:	4613      	mov	r3, r2
 80003ae:	70bb      	strb	r3, [r7, #2]
	GPIOx->MODER &= ~(0b11 << 2*pin);	//reseta os 2 bits do modo de operação
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	78fa      	ldrb	r2, [r7, #3]
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	2103      	movs	r1, #3
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	401a      	ands	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << 2*pin);	//configura o modo selecionado
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	78b9      	ldrb	r1, [r7, #2]
 80003cc:	78fa      	ldrb	r2, [r7, #3]
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	431a      	orrs	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <GPIO_Toggle_Pin>:
	//GPIOx->BSRR |= (1 << (pin + 16 * (1 - level)));	//alternativa usando o registrador BSRR
}

//Inverte o nível lógico em um pino de um GPIO
static inline void GPIO_Toggle_Pin(GPIO_TypeDef* GPIOx, uint8_t pin)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR ^= (1 << pin);	//inverte o nível lógico no pino
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	78fa      	ldrb	r2, [r7, #3]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	405a      	eors	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	615a      	str	r2, [r3, #20]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <__io_putchar>:
	GPIOA->AFR[1] |= (0b0111 << 8) | (0b0111 << 4);	//função alternativa 7 (USART1)
}

//Redefinição da função de envio de dados pela USART1
int __io_putchar(int ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	USART1->DR = ch;						//transmite o dado
 8000418:	4a08      	ldr	r2, [pc, #32]	@ (800043c <__io_putchar+0x2c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE));	//espera pelo fim da transmissão
 800041e:	bf00      	nop
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <__io_putchar+0x2c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f9      	beq.n	8000420 <__io_putchar+0x10>
	return ch;
 800042c:	687b      	ldr	r3, [r7, #4]
}
 800042e:	4618      	mov	r0, r3
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40011000 	.word	0x40011000

08000440 <__io_getchar>:

//Redefinição da função de recebimento de dados pela USART1
int __io_getchar(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
   return (uint16_t)(USART1->DR);	//lê o dado recebido
 8000444:	4b03      	ldr	r3, [pc, #12]	@ (8000454 <__io_getchar+0x14>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	b29b      	uxth	r3, r3
}
 800044a:	4618      	mov	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40011000 	.word	0x40011000

08000458 <USART1_IRQHandler>:

//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32f407vetx.s
void USART1_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());	//lê o dado e reenvia pela USART1
 800045c:	f7ff fff0 	bl	8000440 <__io_getchar>
 8000460:	4603      	mov	r3, r0
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffd4 	bl	8000410 <__io_putchar>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}

0800046c <SysTick_Handler>:
#include "main.h"
#include "Utility.h"

void SysTick_Handler(){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	GPIO_Toggle_Pin(GPIOA, PIN_7);
 8000470:	2107      	movs	r1, #7
 8000472:	4802      	ldr	r0, [pc, #8]	@ (800047c <SysTick_Handler+0x10>)
 8000474:	f7ff ffb7 	bl	80003e6 <GPIO_Toggle_Pin>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40020000 	.word	0x40020000

08000480 <main>:


int main(){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

	Utility_Init();
 8000484:	f7ff fec4 	bl	8000210 <Utility_Init>

	GPIO_Clock_Enable(GPIOA);
 8000488:	480e      	ldr	r0, [pc, #56]	@ (80004c4 <main+0x44>)
 800048a:	f7ff ff6f 	bl	800036c <GPIO_Clock_Enable>
	GPIO_Pin_Mode(GPIOA, PIN_6, OUTPUT);
 800048e:	2201      	movs	r2, #1
 8000490:	2106      	movs	r1, #6
 8000492:	480c      	ldr	r0, [pc, #48]	@ (80004c4 <main+0x44>)
 8000494:	f7ff ff84 	bl	80003a0 <GPIO_Pin_Mode>
	GPIO_Pin_Mode(GPIOA, PIN_7, OUTPUT);
 8000498:	2201      	movs	r2, #1
 800049a:	2107      	movs	r1, #7
 800049c:	4809      	ldr	r0, [pc, #36]	@ (80004c4 <main+0x44>)
 800049e:	f7ff ff7f 	bl	80003a0 <GPIO_Pin_Mode>

	SysTick->LOAD = 6.3e6 - 1; // Carrega o registrador Reload Value
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <main+0x48>)
 80004a4:	4a09      	ldr	r2, [pc, #36]	@ (80004cc <main+0x4c>)
 80004a6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = 0b011;     // Liga o SysTick, habilita a interrupção e seleciona
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <main+0x48>)
 80004aa:	2203      	movs	r2, #3
 80004ac:	601a      	str	r2, [r3, #0]



	while(1){

		GPIO_Toggle_Pin(GPIOA, PIN_6);
 80004ae:	2106      	movs	r1, #6
 80004b0:	4804      	ldr	r0, [pc, #16]	@ (80004c4 <main+0x44>)
 80004b2:	f7ff ff98 	bl	80003e6 <GPIO_Toggle_Pin>
		Delay_ms(1000);
 80004b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ba:	f7ff ff3b 	bl	8000334 <Delay_ms>
		GPIO_Toggle_Pin(GPIOA, PIN_6);
 80004be:	bf00      	nop
 80004c0:	e7f5      	b.n	80004ae <main+0x2e>
 80004c2:	bf00      	nop
 80004c4:	40020000 	.word	0x40020000
 80004c8:	e000e010 	.word	0xe000e010
 80004cc:	0060215f 	.word	0x0060215f

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <NMI_Handler+0x4>

080004d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <MemManage_Handler+0x4>

080004e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000580 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800054c:	f7ff ffea 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	@ (8000584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	@ (8000588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	@ (8000594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000576:	f000 f811 	bl	800059c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800057a:	f7ff ff81 	bl	8000480 <main>
  bx  lr    
 800057e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800058c:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000590:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000594:	2000001c 	.word	0x2000001c

08000598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC_IRQHandler>
	...

0800059c <__libc_init_array>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4d0d      	ldr	r5, [pc, #52]	@ (80005d4 <__libc_init_array+0x38>)
 80005a0:	4c0d      	ldr	r4, [pc, #52]	@ (80005d8 <__libc_init_array+0x3c>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	2600      	movs	r6, #0
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d109      	bne.n	80005c0 <__libc_init_array+0x24>
 80005ac:	4d0b      	ldr	r5, [pc, #44]	@ (80005dc <__libc_init_array+0x40>)
 80005ae:	4c0c      	ldr	r4, [pc, #48]	@ (80005e0 <__libc_init_array+0x44>)
 80005b0:	f000 f818 	bl	80005e4 <_init>
 80005b4:	1b64      	subs	r4, r4, r5
 80005b6:	10a4      	asrs	r4, r4, #2
 80005b8:	2600      	movs	r6, #0
 80005ba:	42a6      	cmp	r6, r4
 80005bc:	d105      	bne.n	80005ca <__libc_init_array+0x2e>
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	3601      	adds	r6, #1
 80005c8:	e7ee      	b.n	80005a8 <__libc_init_array+0xc>
 80005ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ce:	4798      	blx	r3
 80005d0:	3601      	adds	r6, #1
 80005d2:	e7f2      	b.n	80005ba <__libc_init_array+0x1e>
 80005d4:	080005fc 	.word	0x080005fc
 80005d8:	080005fc 	.word	0x080005fc
 80005dc:	080005fc 	.word	0x080005fc
 80005e0:	08000600 	.word	0x08000600

080005e4 <_init>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr

080005f0 <_fini>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr
